
uart_own.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  00003d3e  00003db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002cac  00000000  00000000  00003f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a09  00000000  00000000  00006bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000075d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00007775  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00007967  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00009d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000c2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000c490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000c786  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c9 14 	call	0x2992	; 0x2992 <main>
      7a:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 ec       	ldi	r26, 0xC5	; 197
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 ec       	ldi	r24, 0xC5	; 197
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	65 ec       	ldi	r22, 0xC5	; 197
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e3 53       	subi	r30, 0x33	; 51
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:




void ADC_init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62

	ADMUX=0b01000000;
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 e4       	ldi	r24, 0x40	; 64
     e2c:	80 83       	st	Z, r24
	ADCSRA=0b10000111;
     e2e:	e6 e2       	ldi	r30, 0x26	; 38
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	87 e8       	ldi	r24, 0x87	; 135
     e34:	80 83       	st	Z, r24
}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <ADC_Get_Reading_mv>:

unsigned int ADC_Get_Reading_mv(unsigned char CH)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA |=(1<<ADIF);    // set to one when the conversion complete
     e48:	a6 e2       	ldi	r26, 0x26	; 38
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e6 e2       	ldi	r30, 0x26	; 38
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	8c 93       	st	X, r24


	ADMUX=((ADMUX&0xF8)|CH);   //  enable channel of analog to digital conversion
     e56:	a7 e2       	ldi	r26, 0x27	; 39
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e2       	ldi	r30, 0x27	; 39
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	98 2f       	mov	r25, r24
     e62:	98 7f       	andi	r25, 0xF8	; 248
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	89 2b       	or	r24, r25
     e68:	8c 93       	st	X, r24
	ADCSRA |=(1<<ADSC);
     e6a:	a6 e2       	ldi	r26, 0x26	; 38
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e6 e2       	ldi	r30, 0x26	; 38
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 64       	ori	r24, 0x40	; 64
     e76:	8c 93       	st	X, r24


	while(!(ADCSRA&(1<<ADIF)));
     e78:	e6 e2       	ldi	r30, 0x26	; 38
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	80 71       	andi	r24, 0x10	; 16
     e84:	90 70       	andi	r25, 0x00	; 0
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	b9 f3       	breq	.-18     	; 0xe78 <ADC_Get_Reading_mv+0x3c>

	return ADC;   ///////////////// ????????????/////////////////////////////////
     e8a:	e4 e2       	ldi	r30, 0x24	; 36
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
}
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <LCD_init>:
 */
#include"LCD.h"


void LCD_init(void)
{
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	ce 59       	subi	r28, 0x9E	; 158
     ea8:	d0 40       	sbci	r29, 0x00	; 0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
	LCD_DATA__DDR |=0xF0;
     eb4:	a7 e3       	ldi	r26, 0x37	; 55
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e7 e3       	ldi	r30, 0x37	; 55
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 6f       	ori	r24, 0xF0	; 240
     ec0:	8c 93       	st	X, r24
	LCD_Control_DDR |=(1<<LCD_EN)|(1<<LCD_RS);
     ec2:	a4 e3       	ldi	r26, 0x34	; 52
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e4 e3       	ldi	r30, 0x34	; 52
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 6c       	ori	r24, 0xC0	; 192
     ece:	8c 93       	st	X, r24

	LCD_Control_PORT &=~(1<<LCD_EN);
     ed0:	a5 e3       	ldi	r26, 0x35	; 53
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e3       	ldi	r30, 0x35	; 53
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8f 77       	andi	r24, 0x7F	; 127
     edc:	8c 93       	st	X, r24
     ede:	fe 01       	movw	r30, r28
     ee0:	e5 56       	subi	r30, 0x65	; 101
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e8       	ldi	r26, 0x80	; 128
     eea:	bf e3       	ldi	r27, 0x3F	; 63
     eec:	80 83       	st	Z, r24
     eee:	91 83       	std	Z+1, r25	; 0x01
     ef0:	a2 83       	std	Z+2, r26	; 0x02
     ef2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	8e 01       	movw	r16, r28
     ef6:	09 56       	subi	r16, 0x69	; 105
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	fe 01       	movw	r30, r28
     efc:	e5 56       	subi	r30, 0x65	; 101
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	82 81       	ldd	r24, Z+2	; 0x02
     f06:	93 81       	ldd	r25, Z+3	; 0x03
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	48 e4       	ldi	r20, 0x48	; 72
     f0e:	53 e4       	ldi	r21, 0x43	; 67
     f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	f8 01       	movw	r30, r16
     f1a:	80 83       	st	Z, r24
     f1c:	91 83       	std	Z+1, r25	; 0x01
     f1e:	a2 83       	std	Z+2, r26	; 0x02
     f20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f22:	fe 01       	movw	r30, r28
     f24:	e9 56       	subi	r30, 0x69	; 105
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	60 81       	ld	r22, Z
     f2a:	71 81       	ldd	r23, Z+1	; 0x01
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e8       	ldi	r20, 0x80	; 128
     f36:	5f e3       	ldi	r21, 0x3F	; 63
     f38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f3c:	88 23       	and	r24, r24
     f3e:	44 f4       	brge	.+16     	; 0xf50 <LCD_init+0xb6>
		__ticks = 1;
     f40:	fe 01       	movw	r30, r28
     f42:	eb 56       	subi	r30, 0x6B	; 107
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	80 83       	st	Z, r24
     f4e:	64 c0       	rjmp	.+200    	; 0x1018 <LCD_init+0x17e>
	else if (__tmp > 65535)
     f50:	fe 01       	movw	r30, r28
     f52:	e9 56       	subi	r30, 0x69	; 105
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	60 81       	ld	r22, Z
     f58:	71 81       	ldd	r23, Z+1	; 0x01
     f5a:	82 81       	ldd	r24, Z+2	; 0x02
     f5c:	93 81       	ldd	r25, Z+3	; 0x03
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	0c f0       	brlt	.+2      	; 0xf70 <LCD_init+0xd6>
     f6e:	43 c0       	rjmp	.+134    	; 0xff6 <LCD_init+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f70:	fe 01       	movw	r30, r28
     f72:	e5 56       	subi	r30, 0x65	; 101
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e2       	ldi	r20, 0x20	; 32
     f84:	51 e4       	ldi	r21, 0x41	; 65
     f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8e 01       	movw	r16, r28
     f90:	0b 56       	subi	r16, 0x6B	; 107
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	f8 01       	movw	r30, r16
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
     fa6:	1f c0       	rjmp	.+62     	; 0xfe6 <LCD_init+0x14c>
     fa8:	fe 01       	movw	r30, r28
     faa:	ed 56       	subi	r30, 0x6D	; 109
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	84 e1       	ldi	r24, 0x14	; 20
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb6:	fe 01       	movw	r30, r28
     fb8:	ed 56       	subi	r30, 0x6D	; 109
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <LCD_init+0x126>
     fc4:	fe 01       	movw	r30, r28
     fc6:	ed 56       	subi	r30, 0x6D	; 109
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	91 83       	std	Z+1, r25	; 0x01
     fcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	de 01       	movw	r26, r28
     fd0:	ab 56       	subi	r26, 0x6B	; 107
     fd2:	bf 4f       	sbci	r27, 0xFF	; 255
     fd4:	fe 01       	movw	r30, r28
     fd6:	eb 56       	subi	r30, 0x6B	; 107
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	9c 93       	st	X, r25
     fe4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe6:	fe 01       	movw	r30, r28
     fe8:	eb 56       	subi	r30, 0x6B	; 107
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	d1 f6       	brne	.-76     	; 0xfa8 <LCD_init+0x10e>
     ff4:	27 c0       	rjmp	.+78     	; 0x1044 <LCD_init+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff6:	8e 01       	movw	r16, r28
     ff8:	0b 56       	subi	r16, 0x6B	; 107
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	fe 01       	movw	r30, r28
     ffe:	e9 56       	subi	r30, 0x69	; 105
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	f8 01       	movw	r30, r16
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
    1018:	de 01       	movw	r26, r28
    101a:	af 56       	subi	r26, 0x6F	; 111
    101c:	bf 4f       	sbci	r27, 0xFF	; 255
    101e:	fe 01       	movw	r30, r28
    1020:	eb 56       	subi	r30, 0x6B	; 107
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	8d 93       	st	X+, r24
    102a:	9c 93       	st	X, r25
    102c:	fe 01       	movw	r30, r28
    102e:	ef 56       	subi	r30, 0x6F	; 111
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <LCD_init+0x19c>
    103a:	fe 01       	movw	r30, r28
    103c:	ef 56       	subi	r30, 0x6F	; 111
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
	_delay_ms(1);

	LCD_Send_CMD(0x33);                //enable 4 bits mode
    1044:	83 e3       	ldi	r24, 0x33	; 51
    1046:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    104a:	fe 01       	movw	r30, r28
    104c:	e3 57       	subi	r30, 0x73	; 115
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a8 ec       	ldi	r26, 0xC8	; 200
    1056:	b2 e4       	ldi	r27, 0x42	; 66
    1058:	80 83       	st	Z, r24
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	a2 83       	std	Z+2, r26	; 0x02
    105e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1060:	8e 01       	movw	r16, r28
    1062:	07 57       	subi	r16, 0x77	; 119
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	fe 01       	movw	r30, r28
    1068:	e3 57       	subi	r30, 0x73	; 115
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	60 81       	ld	r22, Z
    106e:	71 81       	ldd	r23, Z+1	; 0x01
    1070:	82 81       	ldd	r24, Z+2	; 0x02
    1072:	93 81       	ldd	r25, Z+3	; 0x03
    1074:	29 e8       	ldi	r18, 0x89	; 137
    1076:	38 e8       	ldi	r19, 0x88	; 136
    1078:	48 e8       	ldi	r20, 0x88	; 136
    107a:	5e e3       	ldi	r21, 0x3E	; 62
    107c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	f8 01       	movw	r30, r16
    1086:	80 83       	st	Z, r24
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	a2 83       	std	Z+2, r26	; 0x02
    108c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    108e:	fe 01       	movw	r30, r28
    1090:	e7 57       	subi	r30, 0x77	; 119
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	60 81       	ld	r22, Z
    1096:	71 81       	ldd	r23, Z+1	; 0x01
    1098:	82 81       	ldd	r24, Z+2	; 0x02
    109a:	93 81       	ldd	r25, Z+3	; 0x03
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	34 f4       	brge	.+12     	; 0x10b8 <LCD_init+0x21e>
		__ticks = 1;
    10ac:	fe 01       	movw	r30, r28
    10ae:	e8 57       	subi	r30, 0x78	; 120
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 83       	st	Z, r24
    10b6:	e0 c0       	rjmp	.+448    	; 0x1278 <LCD_init+0x3de>
	else if (__tmp > 255)
    10b8:	fe 01       	movw	r30, r28
    10ba:	e7 57       	subi	r30, 0x77	; 119
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	60 81       	ld	r22, Z
    10c0:	71 81       	ldd	r23, Z+1	; 0x01
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	53 e4       	ldi	r21, 0x43	; 67
    10ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <LCD_init+0x23e>
    10d6:	c0 c0       	rjmp	.+384    	; 0x1258 <LCD_init+0x3be>
	{
		_delay_ms(__us / 1000.0);
    10d8:	fe 01       	movw	r30, r28
    10da:	e3 57       	subi	r30, 0x73	; 115
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a e7       	ldi	r20, 0x7A	; 122
    10ec:	54 e4       	ldi	r21, 0x44	; 68
    10ee:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	fe 01       	movw	r30, r28
    10f8:	ec 57       	subi	r30, 0x7C	; 124
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	80 83       	st	Z, r24
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	a2 83       	std	Z+2, r26	; 0x02
    1102:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1104:	8e 01       	movw	r16, r28
    1106:	00 58       	subi	r16, 0x80	; 128
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	fe 01       	movw	r30, r28
    110c:	ec 57       	subi	r30, 0x7C	; 124
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	48 e4       	ldi	r20, 0x48	; 72
    111e:	53 e4       	ldi	r21, 0x43	; 67
    1120:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	f8 01       	movw	r30, r16
    112a:	80 83       	st	Z, r24
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	a2 83       	std	Z+2, r26	; 0x02
    1130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1132:	fe 01       	movw	r30, r28
    1134:	e0 58       	subi	r30, 0x80	; 128
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	44 f4       	brge	.+16     	; 0x1160 <LCD_init+0x2c6>
		__ticks = 1;
    1150:	fe 01       	movw	r30, r28
    1152:	e2 58       	subi	r30, 0x82	; 130
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
    115e:	64 c0       	rjmp	.+200    	; 0x1228 <LCD_init+0x38e>
	else if (__tmp > 65535)
    1160:	fe 01       	movw	r30, r28
    1162:	e0 58       	subi	r30, 0x80	; 128
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	0c f0       	brlt	.+2      	; 0x1180 <LCD_init+0x2e6>
    117e:	43 c0       	rjmp	.+134    	; 0x1206 <LCD_init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1180:	fe 01       	movw	r30, r28
    1182:	ec 57       	subi	r30, 0x7C	; 124
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8e 01       	movw	r16, r28
    11a0:	02 58       	subi	r16, 0x82	; 130
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	f8 01       	movw	r30, r16
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	80 83       	st	Z, r24
    11b6:	1f c0       	rjmp	.+62     	; 0x11f6 <LCD_init+0x35c>
    11b8:	fe 01       	movw	r30, r28
    11ba:	e4 58       	subi	r30, 0x84	; 132
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	84 e1       	ldi	r24, 0x14	; 20
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	fe 01       	movw	r30, r28
    11c8:	e4 58       	subi	r30, 0x84	; 132
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <LCD_init+0x336>
    11d4:	fe 01       	movw	r30, r28
    11d6:	e4 58       	subi	r30, 0x84	; 132
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	de 01       	movw	r26, r28
    11e0:	a2 58       	subi	r26, 0x82	; 130
    11e2:	bf 4f       	sbci	r27, 0xFF	; 255
    11e4:	fe 01       	movw	r30, r28
    11e6:	e2 58       	subi	r30, 0x82	; 130
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	91 81       	ldd	r25, Z+1	; 0x01
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	9c 93       	st	X, r25
    11f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	fe 01       	movw	r30, r28
    11f8:	e2 58       	subi	r30, 0x82	; 130
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	d1 f6       	brne	.-76     	; 0x11b8 <LCD_init+0x31e>
    1204:	4b c0       	rjmp	.+150    	; 0x129c <LCD_init+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	8e 01       	movw	r16, r28
    1208:	02 58       	subi	r16, 0x82	; 130
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	fe 01       	movw	r30, r28
    120e:	e0 58       	subi	r30, 0x80	; 128
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	f8 01       	movw	r30, r16
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	80 83       	st	Z, r24
    1228:	de 01       	movw	r26, r28
    122a:	a6 58       	subi	r26, 0x86	; 134
    122c:	bf 4f       	sbci	r27, 0xFF	; 255
    122e:	fe 01       	movw	r30, r28
    1230:	e2 58       	subi	r30, 0x82	; 130
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	9c 93       	st	X, r25
    123c:	8e 93       	st	-X, r24
    123e:	fe 01       	movw	r30, r28
    1240:	e6 58       	subi	r30, 0x86	; 134
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <LCD_init+0x3ae>
    124c:	fe 01       	movw	r30, r28
    124e:	e6 58       	subi	r30, 0x86	; 134
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	22 c0       	rjmp	.+68     	; 0x129c <LCD_init+0x402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1258:	8e 01       	movw	r16, r28
    125a:	08 57       	subi	r16, 0x78	; 120
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	fe 01       	movw	r30, r28
    1260:	e7 57       	subi	r30, 0x77	; 119
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	de 01       	movw	r26, r28
    127a:	a7 58       	subi	r26, 0x87	; 135
    127c:	bf 4f       	sbci	r27, 0xFF	; 255
    127e:	fe 01       	movw	r30, r28
    1280:	e8 57       	subi	r30, 0x78	; 120
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1288:	fe 01       	movw	r30, r28
    128a:	e7 58       	subi	r30, 0x87	; 135
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	8a 95       	dec	r24
    1292:	f1 f7       	brne	.-4      	; 0x1290 <LCD_init+0x3f6>
    1294:	fe 01       	movw	r30, r28
    1296:	e7 58       	subi	r30, 0x87	; 135
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 83       	st	Z, r24
	_delay_us(100);
	LCD_Send_CMD(0x32);
    129c:	82 e3       	ldi	r24, 0x32	; 50
    129e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    12a2:	fe 01       	movw	r30, r28
    12a4:	eb 58       	subi	r30, 0x8B	; 139
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a8 ec       	ldi	r26, 0xC8	; 200
    12ae:	b2 e4       	ldi	r27, 0x42	; 66
    12b0:	80 83       	st	Z, r24
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	a2 83       	std	Z+2, r26	; 0x02
    12b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12b8:	8e 01       	movw	r16, r28
    12ba:	0f 58       	subi	r16, 0x8F	; 143
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	fe 01       	movw	r30, r28
    12c0:	eb 58       	subi	r30, 0x8B	; 139
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	29 e8       	ldi	r18, 0x89	; 137
    12ce:	38 e8       	ldi	r19, 0x88	; 136
    12d0:	48 e8       	ldi	r20, 0x88	; 136
    12d2:	5e e3       	ldi	r21, 0x3E	; 62
    12d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	f8 01       	movw	r30, r16
    12de:	80 83       	st	Z, r24
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	a2 83       	std	Z+2, r26	; 0x02
    12e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12e6:	fe 01       	movw	r30, r28
    12e8:	ef 58       	subi	r30, 0x8F	; 143
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e8       	ldi	r20, 0x80	; 128
    12fa:	5f e3       	ldi	r21, 0x3F	; 63
    12fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1300:	88 23       	and	r24, r24
    1302:	34 f4       	brge	.+12     	; 0x1310 <LCD_init+0x476>
		__ticks = 1;
    1304:	fe 01       	movw	r30, r28
    1306:	e0 59       	subi	r30, 0x90	; 144
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24
    130e:	e0 c0       	rjmp	.+448    	; 0x14d0 <LCD_init+0x636>
	else if (__tmp > 255)
    1310:	fe 01       	movw	r30, r28
    1312:	ef 58       	subi	r30, 0x8F	; 143
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	60 81       	ld	r22, Z
    1318:	71 81       	ldd	r23, Z+1	; 0x01
    131a:	82 81       	ldd	r24, Z+2	; 0x02
    131c:	93 81       	ldd	r25, Z+3	; 0x03
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	4f e7       	ldi	r20, 0x7F	; 127
    1324:	53 e4       	ldi	r21, 0x43	; 67
    1326:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    132a:	18 16       	cp	r1, r24
    132c:	0c f0       	brlt	.+2      	; 0x1330 <LCD_init+0x496>
    132e:	c0 c0       	rjmp	.+384    	; 0x14b0 <LCD_init+0x616>
	{
		_delay_ms(__us / 1000.0);
    1330:	fe 01       	movw	r30, r28
    1332:	eb 58       	subi	r30, 0x8B	; 139
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a e7       	ldi	r20, 0x7A	; 122
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	fe 01       	movw	r30, r28
    1350:	e4 59       	subi	r30, 0x94	; 148
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	80 83       	st	Z, r24
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	a2 83       	std	Z+2, r26	; 0x02
    135a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	8e 01       	movw	r16, r28
    135e:	08 59       	subi	r16, 0x98	; 152
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	fe 01       	movw	r30, r28
    1364:	e4 59       	subi	r30, 0x94	; 148
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	48 e4       	ldi	r20, 0x48	; 72
    1376:	53 e4       	ldi	r21, 0x43	; 67
    1378:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	f8 01       	movw	r30, r16
    1382:	80 83       	st	Z, r24
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	a2 83       	std	Z+2, r26	; 0x02
    1388:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    138a:	fe 01       	movw	r30, r28
    138c:	e8 59       	subi	r30, 0x98	; 152
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	60 81       	ld	r22, Z
    1392:	71 81       	ldd	r23, Z+1	; 0x01
    1394:	82 81       	ldd	r24, Z+2	; 0x02
    1396:	93 81       	ldd	r25, Z+3	; 0x03
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e8       	ldi	r20, 0x80	; 128
    139e:	5f e3       	ldi	r21, 0x3F	; 63
    13a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13a4:	88 23       	and	r24, r24
    13a6:	44 f4       	brge	.+16     	; 0x13b8 <LCD_init+0x51e>
		__ticks = 1;
    13a8:	fe 01       	movw	r30, r28
    13aa:	ea 59       	subi	r30, 0x9A	; 154
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	80 83       	st	Z, r24
    13b6:	64 c0       	rjmp	.+200    	; 0x1480 <LCD_init+0x5e6>
	else if (__tmp > 65535)
    13b8:	fe 01       	movw	r30, r28
    13ba:	e8 59       	subi	r30, 0x98	; 152
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	60 81       	ld	r22, Z
    13c0:	71 81       	ldd	r23, Z+1	; 0x01
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	3f ef       	ldi	r19, 0xFF	; 255
    13ca:	4f e7       	ldi	r20, 0x7F	; 127
    13cc:	57 e4       	ldi	r21, 0x47	; 71
    13ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13d2:	18 16       	cp	r1, r24
    13d4:	0c f0       	brlt	.+2      	; 0x13d8 <LCD_init+0x53e>
    13d6:	43 c0       	rjmp	.+134    	; 0x145e <LCD_init+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d8:	fe 01       	movw	r30, r28
    13da:	e4 59       	subi	r30, 0x94	; 148
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	60 81       	ld	r22, Z
    13e0:	71 81       	ldd	r23, Z+1	; 0x01
    13e2:	82 81       	ldd	r24, Z+2	; 0x02
    13e4:	93 81       	ldd	r25, Z+3	; 0x03
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e2       	ldi	r20, 0x20	; 32
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8e 01       	movw	r16, r28
    13f8:	0a 59       	subi	r16, 0x9A	; 154
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	f8 01       	movw	r30, r16
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
    140e:	1f c0       	rjmp	.+62     	; 0x144e <LCD_init+0x5b4>
    1410:	fe 01       	movw	r30, r28
    1412:	ec 59       	subi	r30, 0x9C	; 156
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	84 e1       	ldi	r24, 0x14	; 20
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    141e:	fe 01       	movw	r30, r28
    1420:	ec 59       	subi	r30, 0x9C	; 156
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <LCD_init+0x58e>
    142c:	fe 01       	movw	r30, r28
    142e:	ec 59       	subi	r30, 0x9C	; 156
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1436:	de 01       	movw	r26, r28
    1438:	aa 59       	subi	r26, 0x9A	; 154
    143a:	bf 4f       	sbci	r27, 0xFF	; 255
    143c:	fe 01       	movw	r30, r28
    143e:	ea 59       	subi	r30, 0x9A	; 154
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	11 96       	adiw	r26, 0x01	; 1
    144a:	9c 93       	st	X, r25
    144c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	fe 01       	movw	r30, r28
    1450:	ea 59       	subi	r30, 0x9A	; 154
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	d1 f6       	brne	.-76     	; 0x1410 <LCD_init+0x576>
    145c:	4b c0       	rjmp	.+150    	; 0x14f4 <LCD_init+0x65a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145e:	8e 01       	movw	r16, r28
    1460:	0a 59       	subi	r16, 0x9A	; 154
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
    1464:	fe 01       	movw	r30, r28
    1466:	e8 59       	subi	r30, 0x98	; 152
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	f8 01       	movw	r30, r16
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	80 83       	st	Z, r24
    1480:	de 01       	movw	r26, r28
    1482:	ae 59       	subi	r26, 0x9E	; 158
    1484:	bf 4f       	sbci	r27, 0xFF	; 255
    1486:	fe 01       	movw	r30, r28
    1488:	ea 59       	subi	r30, 0x9A	; 154
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	9c 93       	st	X, r25
    1494:	8e 93       	st	-X, r24
    1496:	fe 01       	movw	r30, r28
    1498:	ee 59       	subi	r30, 0x9E	; 158
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_init+0x606>
    14a4:	fe 01       	movw	r30, r28
    14a6:	ee 59       	subi	r30, 0x9E	; 158
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    14ae:	22 c0       	rjmp	.+68     	; 0x14f4 <LCD_init+0x65a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14b0:	8e 01       	movw	r16, r28
    14b2:	00 59       	subi	r16, 0x90	; 144
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	fe 01       	movw	r30, r28
    14b8:	ef 58       	subi	r30, 0x8F	; 143
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	f8 01       	movw	r30, r16
    14ce:	80 83       	st	Z, r24
    14d0:	de 01       	movw	r26, r28
    14d2:	af 59       	subi	r26, 0x9F	; 159
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	e0 59       	subi	r30, 0x90	; 144
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14e0:	fe 01       	movw	r30, r28
    14e2:	ef 59       	subi	r30, 0x9F	; 159
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	8a 95       	dec	r24
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <LCD_init+0x64e>
    14ec:	fe 01       	movw	r30, r28
    14ee:	ef 59       	subi	r30, 0x9F	; 159
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	80 83       	st	Z, r24
	_delay_us(100);
	LCD_Send_CMD(0x28);
    14f4:	88 e2       	ldi	r24, 0x28	; 40
    14f6:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    14fa:	fe 01       	movw	r30, r28
    14fc:	e3 5a       	subi	r30, 0xA3	; 163
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a8 ec       	ldi	r26, 0xC8	; 200
    1506:	b2 e4       	ldi	r27, 0x42	; 66
    1508:	80 83       	st	Z, r24
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	a2 83       	std	Z+2, r26	; 0x02
    150e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1510:	8e 01       	movw	r16, r28
    1512:	07 5a       	subi	r16, 0xA7	; 167
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	fe 01       	movw	r30, r28
    1518:	e3 5a       	subi	r30, 0xA3	; 163
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	29 e8       	ldi	r18, 0x89	; 137
    1526:	38 e8       	ldi	r19, 0x88	; 136
    1528:	48 e8       	ldi	r20, 0x88	; 136
    152a:	5e e3       	ldi	r21, 0x3E	; 62
    152c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	80 83       	st	Z, r24
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	a2 83       	std	Z+2, r26	; 0x02
    153c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    153e:	fe 01       	movw	r30, r28
    1540:	e7 5a       	subi	r30, 0xA7	; 167
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	93 81       	ldd	r25, Z+3	; 0x03
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	34 f4       	brge	.+12     	; 0x1568 <LCD_init+0x6ce>
		__ticks = 1;
    155c:	fe 01       	movw	r30, r28
    155e:	e8 5a       	subi	r30, 0xA8	; 168
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 83       	st	Z, r24
    1566:	e0 c0       	rjmp	.+448    	; 0x1728 <LCD_init+0x88e>
	else if (__tmp > 255)
    1568:	fe 01       	movw	r30, r28
    156a:	e7 5a       	subi	r30, 0xA7	; 167
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	53 e4       	ldi	r21, 0x43	; 67
    157e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	0c f0       	brlt	.+2      	; 0x1588 <LCD_init+0x6ee>
    1586:	c0 c0       	rjmp	.+384    	; 0x1708 <LCD_init+0x86e>
	{
		_delay_ms(__us / 1000.0);
    1588:	fe 01       	movw	r30, r28
    158a:	e3 5a       	subi	r30, 0xA3	; 163
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a e7       	ldi	r20, 0x7A	; 122
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	fe 01       	movw	r30, r28
    15a8:	ec 5a       	subi	r30, 0xAC	; 172
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 83       	st	Z, r24
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	a2 83       	std	Z+2, r26	; 0x02
    15b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b4:	8e 01       	movw	r16, r28
    15b6:	00 5b       	subi	r16, 0xB0	; 176
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	ec 5a       	subi	r30, 0xAC	; 172
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	48 e4       	ldi	r20, 0x48	; 72
    15ce:	53 e4       	ldi	r21, 0x43	; 67
    15d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	f8 01       	movw	r30, r16
    15da:	80 83       	st	Z, r24
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	a2 83       	std	Z+2, r26	; 0x02
    15e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15e2:	fe 01       	movw	r30, r28
    15e4:	e0 5b       	subi	r30, 0xB0	; 176
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	44 f4       	brge	.+16     	; 0x1610 <LCD_init+0x776>
		__ticks = 1;
    1600:	fe 01       	movw	r30, r28
    1602:	e2 5b       	subi	r30, 0xB2	; 178
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
    160e:	64 c0       	rjmp	.+200    	; 0x16d8 <LCD_init+0x83e>
	else if (__tmp > 65535)
    1610:	fe 01       	movw	r30, r28
    1612:	e0 5b       	subi	r30, 0xB0	; 176
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	60 81       	ld	r22, Z
    1618:	71 81       	ldd	r23, Z+1	; 0x01
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	0c f0       	brlt	.+2      	; 0x1630 <LCD_init+0x796>
    162e:	43 c0       	rjmp	.+134    	; 0x16b6 <LCD_init+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1630:	fe 01       	movw	r30, r28
    1632:	ec 5a       	subi	r30, 0xAC	; 172
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	8e 01       	movw	r16, r28
    1650:	02 5b       	subi	r16, 0xB2	; 178
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	f8 01       	movw	r30, r16
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <LCD_init+0x80c>
    1668:	fe 01       	movw	r30, r28
    166a:	e4 5b       	subi	r30, 0xB4	; 180
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	84 e1       	ldi	r24, 0x14	; 20
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1676:	fe 01       	movw	r30, r28
    1678:	e4 5b       	subi	r30, 0xB4	; 180
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_init+0x7e6>
    1684:	fe 01       	movw	r30, r28
    1686:	e4 5b       	subi	r30, 0xB4	; 180
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	de 01       	movw	r26, r28
    1690:	a2 5b       	subi	r26, 0xB2	; 178
    1692:	bf 4f       	sbci	r27, 0xFF	; 255
    1694:	fe 01       	movw	r30, r28
    1696:	e2 5b       	subi	r30, 0xB2	; 178
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	9c 93       	st	X, r25
    16a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a6:	fe 01       	movw	r30, r28
    16a8:	e2 5b       	subi	r30, 0xB2	; 178
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	d1 f6       	brne	.-76     	; 0x1668 <LCD_init+0x7ce>
    16b4:	4b c0       	rjmp	.+150    	; 0x174c <LCD_init+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	8e 01       	movw	r16, r28
    16b8:	02 5b       	subi	r16, 0xB2	; 178
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	e0 5b       	subi	r30, 0xB0	; 176
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	f8 01       	movw	r30, r16
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	de 01       	movw	r26, r28
    16da:	a6 5b       	subi	r26, 0xB6	; 182
    16dc:	bf 4f       	sbci	r27, 0xFF	; 255
    16de:	fe 01       	movw	r30, r28
    16e0:	e2 5b       	subi	r30, 0xB2	; 178
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	9c 93       	st	X, r25
    16ec:	8e 93       	st	-X, r24
    16ee:	fe 01       	movw	r30, r28
    16f0:	e6 5b       	subi	r30, 0xB6	; 182
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <LCD_init+0x85e>
    16fc:	fe 01       	movw	r30, r28
    16fe:	e6 5b       	subi	r30, 0xB6	; 182
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
    1706:	22 c0       	rjmp	.+68     	; 0x174c <LCD_init+0x8b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1708:	8e 01       	movw	r16, r28
    170a:	08 5a       	subi	r16, 0xA8	; 168
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e7 5a       	subi	r30, 0xA7	; 167
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	f8 01       	movw	r30, r16
    1726:	80 83       	st	Z, r24
    1728:	de 01       	movw	r26, r28
    172a:	a7 5b       	subi	r26, 0xB7	; 183
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	e8 5a       	subi	r30, 0xA8	; 168
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1738:	fe 01       	movw	r30, r28
    173a:	e7 5b       	subi	r30, 0xB7	; 183
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	8a 95       	dec	r24
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_init+0x8a6>
    1744:	fe 01       	movw	r30, r28
    1746:	e7 5b       	subi	r30, 0xB7	; 183
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 83       	st	Z, r24
	_delay_us(100);
	LCD_Send_CMD(0x0e);          //display on cursor on
    174c:	8e e0       	ldi	r24, 0x0E	; 14
    174e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    1752:	fe 01       	movw	r30, r28
    1754:	eb 5b       	subi	r30, 0xBB	; 187
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a8 ec       	ldi	r26, 0xC8	; 200
    175e:	b2 e4       	ldi	r27, 0x42	; 66
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1768:	8e 01       	movw	r16, r28
    176a:	0f 5b       	subi	r16, 0xBF	; 191
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	fe 01       	movw	r30, r28
    1770:	eb 5b       	subi	r30, 0xBB	; 187
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	29 e8       	ldi	r18, 0x89	; 137
    177e:	38 e8       	ldi	r19, 0x88	; 136
    1780:	48 e8       	ldi	r20, 0x88	; 136
    1782:	5e e3       	ldi	r21, 0x3E	; 62
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1796:	fe 01       	movw	r30, r28
    1798:	ef 5b       	subi	r30, 0xBF	; 191
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	34 f4       	brge	.+12     	; 0x17c0 <LCD_init+0x926>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	fe 01       	movw	r30, r28
    17b8:	e0 5c       	subi	r30, 0xC0	; 192
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 83       	st	Z, r24
    17be:	9d c0       	rjmp	.+314    	; 0x18fa <LCD_init+0xa60>
	else if (__tmp > 255)
    17c0:	fe 01       	movw	r30, r28
    17c2:	ef 5b       	subi	r30, 0xBF	; 191
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	53 e4       	ldi	r21, 0x43	; 67
    17d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <LCD_init+0x946>
    17de:	7e c0       	rjmp	.+252    	; 0x18dc <LCD_init+0xa42>
	{
		_delay_ms(__us / 1000.0);
    17e0:	fe 01       	movw	r30, r28
    17e2:	eb 5b       	subi	r30, 0xBB	; 187
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a e7       	ldi	r20, 0x7A	; 122
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8c af       	std	Y+60, r24	; 0x3c
    1800:	9d af       	std	Y+61, r25	; 0x3d
    1802:	ae af       	std	Y+62, r26	; 0x3e
    1804:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6c ad       	ldd	r22, Y+60	; 0x3c
    1808:	7d ad       	ldd	r23, Y+61	; 0x3d
    180a:	8e ad       	ldd	r24, Y+62	; 0x3e
    180c:	9f ad       	ldd	r25, Y+63	; 0x3f
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	48 e4       	ldi	r20, 0x48	; 72
    1814:	53 e4       	ldi	r21, 0x43	; 67
    1816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	88 af       	std	Y+56, r24	; 0x38
    1820:	99 af       	std	Y+57, r25	; 0x39
    1822:	aa af       	std	Y+58, r26	; 0x3a
    1824:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1826:	68 ad       	ldd	r22, Y+56	; 0x38
    1828:	79 ad       	ldd	r23, Y+57	; 0x39
    182a:	8a ad       	ldd	r24, Y+58	; 0x3a
    182c:	9b ad       	ldd	r25, Y+59	; 0x3b
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <LCD_init+0x9ae>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9f ab       	std	Y+55, r25	; 0x37
    1844:	8e ab       	std	Y+54, r24	; 0x36
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <LCD_init+0xa2c>
	else if (__tmp > 65535)
    1848:	68 ad       	ldd	r22, Y+56	; 0x38
    184a:	79 ad       	ldd	r23, Y+57	; 0x39
    184c:	8a ad       	ldd	r24, Y+58	; 0x3a
    184e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <LCD_init+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6c ad       	ldd	r22, Y+60	; 0x3c
    1862:	7d ad       	ldd	r23, Y+61	; 0x3d
    1864:	8e ad       	ldd	r24, Y+62	; 0x3e
    1866:	9f ad       	ldd	r25, Y+63	; 0x3f
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9f ab       	std	Y+55, r25	; 0x37
    1886:	8e ab       	std	Y+54, r24	; 0x36
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <LCD_init+0xa0e>
    188a:	84 e1       	ldi	r24, 0x14	; 20
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9d ab       	std	Y+53, r25	; 0x35
    1890:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1892:	8c a9       	ldd	r24, Y+52	; 0x34
    1894:	9d a9       	ldd	r25, Y+53	; 0x35
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_init+0x9fc>
    189a:	9d ab       	std	Y+53, r25	; 0x35
    189c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8e a9       	ldd	r24, Y+54	; 0x36
    18a0:	9f a9       	ldd	r25, Y+55	; 0x37
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9f ab       	std	Y+55, r25	; 0x37
    18a6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8e a9       	ldd	r24, Y+54	; 0x36
    18aa:	9f a9       	ldd	r25, Y+55	; 0x37
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <LCD_init+0x9f0>
    18b0:	2d c0       	rjmp	.+90     	; 0x190c <LCD_init+0xa72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	68 ad       	ldd	r22, Y+56	; 0x38
    18b4:	79 ad       	ldd	r23, Y+57	; 0x39
    18b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    18b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    18ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9f ab       	std	Y+55, r25	; 0x37
    18c4:	8e ab       	std	Y+54, r24	; 0x36
    18c6:	8e a9       	ldd	r24, Y+54	; 0x36
    18c8:	9f a9       	ldd	r25, Y+55	; 0x37
    18ca:	9b ab       	std	Y+51, r25	; 0x33
    18cc:	8a ab       	std	Y+50, r24	; 0x32
    18ce:	8a a9       	ldd	r24, Y+50	; 0x32
    18d0:	9b a9       	ldd	r25, Y+51	; 0x33
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_init+0xa38>
    18d6:	9b ab       	std	Y+51, r25	; 0x33
    18d8:	8a ab       	std	Y+50, r24	; 0x32
    18da:	18 c0       	rjmp	.+48     	; 0x190c <LCD_init+0xa72>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18dc:	fe 01       	movw	r30, r28
    18de:	ef 5b       	subi	r30, 0xBF	; 191
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	fe 01       	movw	r30, r28
    18f4:	e0 5c       	subi	r30, 0xC0	; 192
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 83       	st	Z, r24
    18fa:	fe 01       	movw	r30, r28
    18fc:	e0 5c       	subi	r30, 0xC0	; 192
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1904:	89 a9       	ldd	r24, Y+49	; 0x31
    1906:	8a 95       	dec	r24
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_init+0xa6c>
    190a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	LCD_Send_CMD(0x01);                    //clear LCD
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	aa ef       	ldi	r26, 0xFA	; 250
    1918:	b4 e4       	ldi	r27, 0x44	; 68
    191a:	8d a7       	std	Y+45, r24	; 0x2d
    191c:	9e a7       	std	Y+46, r25	; 0x2e
    191e:	af a7       	std	Y+47, r26	; 0x2f
    1920:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1922:	6d a5       	ldd	r22, Y+45	; 0x2d
    1924:	7e a5       	ldd	r23, Y+46	; 0x2e
    1926:	8f a5       	ldd	r24, Y+47	; 0x2f
    1928:	98 a9       	ldd	r25, Y+48	; 0x30
    192a:	29 e8       	ldi	r18, 0x89	; 137
    192c:	38 e8       	ldi	r19, 0x88	; 136
    192e:	48 e8       	ldi	r20, 0x88	; 136
    1930:	5e e3       	ldi	r21, 0x3E	; 62
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	89 a7       	std	Y+41, r24	; 0x29
    193c:	9a a7       	std	Y+42, r25	; 0x2a
    193e:	ab a7       	std	Y+43, r26	; 0x2b
    1940:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1942:	69 a5       	ldd	r22, Y+41	; 0x29
    1944:	7a a5       	ldd	r23, Y+42	; 0x2a
    1946:	8b a5       	ldd	r24, Y+43	; 0x2b
    1948:	9c a5       	ldd	r25, Y+44	; 0x2c
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	1c f4       	brge	.+6      	; 0x1960 <LCD_init+0xac6>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	88 a7       	std	Y+40, r24	; 0x28
    195e:	91 c0       	rjmp	.+290    	; 0x1a82 <LCD_init+0xbe8>
	else if (__tmp > 255)
    1960:	69 a5       	ldd	r22, Y+41	; 0x29
    1962:	7a a5       	ldd	r23, Y+42	; 0x2a
    1964:	8b a5       	ldd	r24, Y+43	; 0x2b
    1966:	9c a5       	ldd	r25, Y+44	; 0x2c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4f e7       	ldi	r20, 0x7F	; 127
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1974:	18 16       	cp	r1, r24
    1976:	0c f0       	brlt	.+2      	; 0x197a <LCD_init+0xae0>
    1978:	7b c0       	rjmp	.+246    	; 0x1a70 <LCD_init+0xbd6>
	{
		_delay_ms(__us / 1000.0);
    197a:	6d a5       	ldd	r22, Y+45	; 0x2d
    197c:	7e a5       	ldd	r23, Y+46	; 0x2e
    197e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1980:	98 a9       	ldd	r25, Y+48	; 0x30
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a e7       	ldi	r20, 0x7A	; 122
    1988:	54 e4       	ldi	r21, 0x44	; 68
    198a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8c a3       	std	Y+36, r24	; 0x24
    1994:	9d a3       	std	Y+37, r25	; 0x25
    1996:	ae a3       	std	Y+38, r26	; 0x26
    1998:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199a:	6c a1       	ldd	r22, Y+36	; 0x24
    199c:	7d a1       	ldd	r23, Y+37	; 0x25
    199e:	8e a1       	ldd	r24, Y+38	; 0x26
    19a0:	9f a1       	ldd	r25, Y+39	; 0x27
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	48 e4       	ldi	r20, 0x48	; 72
    19a8:	53 e4       	ldi	r21, 0x43	; 67
    19aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	88 a3       	std	Y+32, r24	; 0x20
    19b4:	99 a3       	std	Y+33, r25	; 0x21
    19b6:	aa a3       	std	Y+34, r26	; 0x22
    19b8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    19ba:	68 a1       	ldd	r22, Y+32	; 0x20
    19bc:	79 a1       	ldd	r23, Y+33	; 0x21
    19be:	8a a1       	ldd	r24, Y+34	; 0x22
    19c0:	9b a1       	ldd	r25, Y+35	; 0x23
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e8       	ldi	r20, 0x80	; 128
    19c8:	5f e3       	ldi	r21, 0x3F	; 63
    19ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19ce:	88 23       	and	r24, r24
    19d0:	2c f4       	brge	.+10     	; 0x19dc <LCD_init+0xb42>
		__ticks = 1;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9f 8f       	std	Y+31, r25	; 0x1f
    19d8:	8e 8f       	std	Y+30, r24	; 0x1e
    19da:	3f c0       	rjmp	.+126    	; 0x1a5a <LCD_init+0xbc0>
	else if (__tmp > 65535)
    19dc:	68 a1       	ldd	r22, Y+32	; 0x20
    19de:	79 a1       	ldd	r23, Y+33	; 0x21
    19e0:	8a a1       	ldd	r24, Y+34	; 0x22
    19e2:	9b a1       	ldd	r25, Y+35	; 0x23
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	3f ef       	ldi	r19, 0xFF	; 255
    19e8:	4f e7       	ldi	r20, 0x7F	; 127
    19ea:	57 e4       	ldi	r21, 0x47	; 71
    19ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	4c f5       	brge	.+82     	; 0x1a46 <LCD_init+0xbac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	6c a1       	ldd	r22, Y+36	; 0x24
    19f6:	7d a1       	ldd	r23, Y+37	; 0x25
    19f8:	8e a1       	ldd	r24, Y+38	; 0x26
    19fa:	9f a1       	ldd	r25, Y+39	; 0x27
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e2       	ldi	r20, 0x20	; 32
    1a02:	51 e4       	ldi	r21, 0x41	; 65
    1a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9f 8f       	std	Y+31, r25	; 0x1f
    1a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <LCD_init+0xba2>
    1a1e:	84 e1       	ldi	r24, 0x14	; 20
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9d 8f       	std	Y+29, r25	; 0x1d
    1a24:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a28:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <LCD_init+0xb90>
    1a2e:	9d 8f       	std	Y+29, r25	; 0x1d
    1a30:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a34:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	9f 8f       	std	Y+31, r25	; 0x1f
    1a3a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	69 f7       	brne	.-38     	; 0x1a1e <LCD_init+0xb84>
    1a44:	24 c0       	rjmp	.+72     	; 0x1a8e <LCD_init+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a46:	68 a1       	ldd	r22, Y+32	; 0x20
    1a48:	79 a1       	ldd	r23, Y+33	; 0x21
    1a4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1a4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9f 8f       	std	Y+31, r25	; 0x1f
    1a58:	8e 8f       	std	Y+30, r24	; 0x1e
    1a5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a5e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a60:	8a 8f       	std	Y+26, r24	; 0x1a
    1a62:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a64:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <LCD_init+0xbcc>
    1a6a:	9b 8f       	std	Y+27, r25	; 0x1b
    1a6c:	8a 8f       	std	Y+26, r24	; 0x1a
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_init+0xbf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a70:	69 a5       	ldd	r22, Y+41	; 0x29
    1a72:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	88 a7       	std	Y+40, r24	; 0x28
    1a82:	88 a5       	ldd	r24, Y+40	; 0x28
    1a84:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a86:	89 8d       	ldd	r24, Y+25	; 0x19
    1a88:	8a 95       	dec	r24
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <LCD_init+0xbee>
    1a8c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2000);
	LCD_Send_CMD(0x06);                    // shift cursor right
    1a8e:	86 e0       	ldi	r24, 0x06	; 6
    1a90:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a8 ec       	ldi	r26, 0xC8	; 200
    1a9a:	b2 e4       	ldi	r27, 0x42	; 66
    1a9c:	8d 8b       	std	Y+21, r24	; 0x15
    1a9e:	9e 8b       	std	Y+22, r25	; 0x16
    1aa0:	af 8b       	std	Y+23, r26	; 0x17
    1aa2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1aac:	29 e8       	ldi	r18, 0x89	; 137
    1aae:	38 e8       	ldi	r19, 0x88	; 136
    1ab0:	48 e8       	ldi	r20, 0x88	; 136
    1ab2:	5e e3       	ldi	r21, 0x3E	; 62
    1ab4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	89 8b       	std	Y+17, r24	; 0x11
    1abe:	9a 8b       	std	Y+18, r25	; 0x12
    1ac0:	ab 8b       	std	Y+19, r26	; 0x13
    1ac2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ac4:	69 89       	ldd	r22, Y+17	; 0x11
    1ac6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	1c f4       	brge	.+6      	; 0x1ae2 <LCD_init+0xc48>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	88 8b       	std	Y+16, r24	; 0x10
    1ae0:	91 c0       	rjmp	.+290    	; 0x1c04 <LCD_init+0xd6a>
	else if (__tmp > 255)
    1ae2:	69 89       	ldd	r22, Y+17	; 0x11
    1ae4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	53 e4       	ldi	r21, 0x43	; 67
    1af2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	0c f0       	brlt	.+2      	; 0x1afc <LCD_init+0xc62>
    1afa:	7b c0       	rjmp	.+246    	; 0x1bf2 <LCD_init+0xd58>
	{
		_delay_ms(__us / 1000.0);
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a e7       	ldi	r20, 0x7A	; 122
    1b0a:	54 e4       	ldi	r21, 0x44	; 68
    1b0c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8c 87       	std	Y+12, r24	; 0x0c
    1b16:	9d 87       	std	Y+13, r25	; 0x0d
    1b18:	ae 87       	std	Y+14, r26	; 0x0e
    1b1a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	48 e4       	ldi	r20, 0x48	; 72
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	88 87       	std	Y+8, r24	; 0x08
    1b36:	99 87       	std	Y+9, r25	; 0x09
    1b38:	aa 87       	std	Y+10, r26	; 0x0a
    1b3a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b3c:	68 85       	ldd	r22, Y+8	; 0x08
    1b3e:	79 85       	ldd	r23, Y+9	; 0x09
    1b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <LCD_init+0xcc4>
		__ticks = 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9f 83       	std	Y+7, r25	; 0x07
    1b5a:	8e 83       	std	Y+6, r24	; 0x06
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <LCD_init+0xd42>
	else if (__tmp > 65535)
    1b5e:	68 85       	ldd	r22, Y+8	; 0x08
    1b60:	79 85       	ldd	r23, Y+9	; 0x09
    1b62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	4c f5       	brge	.+82     	; 0x1bc8 <LCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b78:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9f 83       	std	Y+7, r25	; 0x07
    1b9c:	8e 83       	std	Y+6, r24	; 0x06
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_init+0xd24>
    1ba0:	84 e1       	ldi	r24, 0x14	; 20
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9d 83       	std	Y+5, r25	; 0x05
    1ba6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_init+0xd12>
    1bb0:	9d 83       	std	Y+5, r25	; 0x05
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9f 83       	std	Y+7, r25	; 0x07
    1bbc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_init+0xd06>
    1bc6:	24 c0       	rjmp	.+72     	; 0x1c10 <LCD_init+0xd76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	68 85       	ldd	r22, Y+8	; 0x08
    1bca:	79 85       	ldd	r23, Y+9	; 0x09
    1bcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bce:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9f 83       	std	Y+7, r25	; 0x07
    1bda:	8e 83       	std	Y+6, r24	; 0x06
    1bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bde:	9f 81       	ldd	r25, Y+7	; 0x07
    1be0:	9b 83       	std	Y+3, r25	; 0x03
    1be2:	8a 83       	std	Y+2, r24	; 0x02
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_init+0xd4e>
    1bec:	9b 83       	std	Y+3, r25	; 0x03
    1bee:	8a 83       	std	Y+2, r24	; 0x02
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <LCD_init+0xd76>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bf2:	69 89       	ldd	r22, Y+17	; 0x11
    1bf4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	88 8b       	std	Y+16, r24	; 0x10
    1c04:	88 89       	ldd	r24, Y+16	; 0x10
    1c06:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	8a 95       	dec	r24
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_init+0xd70>
    1c0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);


}
    1c10:	c2 56       	subi	r28, 0x62	; 98
    1c12:	df 4f       	sbci	r29, 0xFF	; 255
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <LCD_Send_CMD>:


void LCD_Send_CMD(unsigned char cmd)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	ef 97       	sbiw	r28, 0x3f	; 63
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	8f af       	std	Y+63, r24	; 0x3f
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(cmd&0xF0);
    1c3e:	a8 e3       	ldi	r26, 0x38	; 56
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e8 e3       	ldi	r30, 0x38	; 56
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	98 2f       	mov	r25, r24
    1c4a:	9f 70       	andi	r25, 0x0F	; 15
    1c4c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c4e:	80 7f       	andi	r24, 0xF0	; 240
    1c50:	89 2b       	or	r24, r25
    1c52:	8c 93       	st	X, r24

	LCD_Control_PORT &=~(1<<LCD_RS);
    1c54:	a5 e3       	ldi	r26, 0x35	; 53
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e5 e3       	ldi	r30, 0x35	; 53
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 7b       	andi	r24, 0xBF	; 191
    1c60:	8c 93       	st	X, r24

	LCD_Control_PORT |=(1<<LCD_EN);
    1c62:	a5 e3       	ldi	r26, 0x35	; 53
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e5 e3       	ldi	r30, 0x35	; 53
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 68       	ori	r24, 0x80	; 128
    1c6e:	8c 93       	st	X, r24
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a0 e8       	ldi	r26, 0x80	; 128
    1c76:	bf e3       	ldi	r27, 0x3F	; 63
    1c78:	8b af       	std	Y+59, r24	; 0x3b
    1c7a:	9c af       	std	Y+60, r25	; 0x3c
    1c7c:	ad af       	std	Y+61, r26	; 0x3d
    1c7e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c80:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c82:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c84:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c86:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c88:	29 e8       	ldi	r18, 0x89	; 137
    1c8a:	38 e8       	ldi	r19, 0x88	; 136
    1c8c:	48 e8       	ldi	r20, 0x88	; 136
    1c8e:	5e e3       	ldi	r21, 0x3E	; 62
    1c90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8f ab       	std	Y+55, r24	; 0x37
    1c9a:	98 af       	std	Y+56, r25	; 0x38
    1c9c:	a9 af       	std	Y+57, r26	; 0x39
    1c9e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1ca0:	6f a9       	ldd	r22, Y+55	; 0x37
    1ca2:	78 ad       	ldd	r23, Y+56	; 0x38
    1ca4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	1c f4       	brge	.+6      	; 0x1cbe <LCD_Send_CMD+0x96>
		__ticks = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	8e ab       	std	Y+54, r24	; 0x36
    1cbc:	91 c0       	rjmp	.+290    	; 0x1de0 <LCD_Send_CMD+0x1b8>
	else if (__tmp > 255)
    1cbe:	6f a9       	ldd	r22, Y+55	; 0x37
    1cc0:	78 ad       	ldd	r23, Y+56	; 0x38
    1cc2:	89 ad       	ldd	r24, Y+57	; 0x39
    1cc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	53 e4       	ldi	r21, 0x43	; 67
    1cce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	0c f0       	brlt	.+2      	; 0x1cd8 <LCD_Send_CMD+0xb0>
    1cd6:	7b c0       	rjmp	.+246    	; 0x1dce <LCD_Send_CMD+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1cd8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cda:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a e7       	ldi	r20, 0x7A	; 122
    1ce6:	54 e4       	ldi	r21, 0x44	; 68
    1ce8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8a ab       	std	Y+50, r24	; 0x32
    1cf2:	9b ab       	std	Y+51, r25	; 0x33
    1cf4:	ac ab       	std	Y+52, r26	; 0x34
    1cf6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	6a a9       	ldd	r22, Y+50	; 0x32
    1cfa:	7b a9       	ldd	r23, Y+51	; 0x33
    1cfc:	8c a9       	ldd	r24, Y+52	; 0x34
    1cfe:	9d a9       	ldd	r25, Y+53	; 0x35
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	48 e4       	ldi	r20, 0x48	; 72
    1d06:	53 e4       	ldi	r21, 0x43	; 67
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8e a7       	std	Y+46, r24	; 0x2e
    1d12:	9f a7       	std	Y+47, r25	; 0x2f
    1d14:	a8 ab       	std	Y+48, r26	; 0x30
    1d16:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d18:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d1a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d1c:	88 a9       	ldd	r24, Y+48	; 0x30
    1d1e:	99 a9       	ldd	r25, Y+49	; 0x31
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <LCD_Send_CMD+0x112>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9d a7       	std	Y+45, r25	; 0x2d
    1d36:	8c a7       	std	Y+44, r24	; 0x2c
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <LCD_Send_CMD+0x190>
	else if (__tmp > 65535)
    1d3a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d3c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d3e:	88 a9       	ldd	r24, Y+48	; 0x30
    1d40:	99 a9       	ldd	r25, Y+49	; 0x31
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <LCD_Send_CMD+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	6a a9       	ldd	r22, Y+50	; 0x32
    1d54:	7b a9       	ldd	r23, Y+51	; 0x33
    1d56:	8c a9       	ldd	r24, Y+52	; 0x34
    1d58:	9d a9       	ldd	r25, Y+53	; 0x35
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9d a7       	std	Y+45, r25	; 0x2d
    1d78:	8c a7       	std	Y+44, r24	; 0x2c
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <LCD_Send_CMD+0x172>
    1d7c:	84 e1       	ldi	r24, 0x14	; 20
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9b a7       	std	Y+43, r25	; 0x2b
    1d82:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d84:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d86:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_Send_CMD+0x160>
    1d8c:	9b a7       	std	Y+43, r25	; 0x2b
    1d8e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d92:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9d a7       	std	Y+45, r25	; 0x2d
    1d98:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d9c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <LCD_Send_CMD+0x154>
    1da2:	24 c0       	rjmp	.+72     	; 0x1dec <LCD_Send_CMD+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1da6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1da8:	88 a9       	ldd	r24, Y+48	; 0x30
    1daa:	99 a9       	ldd	r25, Y+49	; 0x31
    1dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9d a7       	std	Y+45, r25	; 0x2d
    1db6:	8c a7       	std	Y+44, r24	; 0x2c
    1db8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dba:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dbc:	99 a7       	std	Y+41, r25	; 0x29
    1dbe:	88 a7       	std	Y+40, r24	; 0x28
    1dc0:	88 a5       	ldd	r24, Y+40	; 0x28
    1dc2:	99 a5       	ldd	r25, Y+41	; 0x29
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_Send_CMD+0x19c>
    1dc8:	99 a7       	std	Y+41, r25	; 0x29
    1dca:	88 a7       	std	Y+40, r24	; 0x28
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_Send_CMD+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dce:	6f a9       	ldd	r22, Y+55	; 0x37
    1dd0:	78 ad       	ldd	r23, Y+56	; 0x38
    1dd2:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	8e ab       	std	Y+54, r24	; 0x36
    1de0:	8e a9       	ldd	r24, Y+54	; 0x36
    1de2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1de4:	8f a1       	ldd	r24, Y+39	; 0x27
    1de6:	8a 95       	dec	r24
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_Send_CMD+0x1be>
    1dea:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    1dec:	a5 e3       	ldi	r26, 0x35	; 53
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 77       	andi	r24, 0x7F	; 127
    1df8:	8c 93       	st	X, r24
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e8       	ldi	r26, 0x80	; 128
    1e00:	bf e3       	ldi	r27, 0x3F	; 63
    1e02:	8b a3       	std	Y+35, r24	; 0x23
    1e04:	9c a3       	std	Y+36, r25	; 0x24
    1e06:	ad a3       	std	Y+37, r26	; 0x25
    1e08:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e10:	9e a1       	ldd	r25, Y+38	; 0x26
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	48 e4       	ldi	r20, 0x48	; 72
    1e18:	53 e4       	ldi	r21, 0x43	; 67
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	8f 8f       	std	Y+31, r24	; 0x1f
    1e24:	98 a3       	std	Y+32, r25	; 0x20
    1e26:	a9 a3       	std	Y+33, r26	; 0x21
    1e28:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e2c:	78 a1       	ldd	r23, Y+32	; 0x20
    1e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e30:	9a a1       	ldd	r25, Y+34	; 0x22
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <LCD_Send_CMD+0x224>
		__ticks = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9e 8f       	std	Y+30, r25	; 0x1e
    1e48:	8d 8f       	std	Y+29, r24	; 0x1d
    1e4a:	3f c0       	rjmp	.+126    	; 0x1eca <LCD_Send_CMD+0x2a2>
	else if (__tmp > 65535)
    1e4c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e4e:	78 a1       	ldd	r23, Y+32	; 0x20
    1e50:	89 a1       	ldd	r24, Y+33	; 0x21
    1e52:	9a a1       	ldd	r25, Y+34	; 0x22
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	4c f5       	brge	.+82     	; 0x1eb6 <LCD_Send_CMD+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e64:	6b a1       	ldd	r22, Y+35	; 0x23
    1e66:	7c a1       	ldd	r23, Y+36	; 0x24
    1e68:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	51 e4       	ldi	r21, 0x41	; 65
    1e74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <LCD_Send_CMD+0x284>
    1e8e:	84 e1       	ldi	r24, 0x14	; 20
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9c 8f       	std	Y+28, r25	; 0x1c
    1e94:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_Send_CMD+0x272>
    1e9e:	9c 8f       	std	Y+28, r25	; 0x1c
    1ea0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ea4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eaa:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	69 f7       	brne	.-38     	; 0x1e8e <LCD_Send_CMD+0x266>
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <LCD_Send_CMD+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1eb8:	78 a1       	ldd	r23, Y+32	; 0x20
    1eba:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec8:	8d 8f       	std	Y+29, r24	; 0x1d
    1eca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ecc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ece:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed0:	89 8f       	std	Y+25, r24	; 0x19
    1ed2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ed4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_Send_CMD+0x2ae>
    1eda:	9a 8f       	std	Y+26, r25	; 0x1a
    1edc:	89 8f       	std	Y+25, r24	; 0x19


	_delay_ms(1);


	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(cmd<<4);
    1ede:	a8 e3       	ldi	r26, 0x38	; 56
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e8 e3       	ldi	r30, 0x38	; 56
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	28 2f       	mov	r18, r24
    1eea:	2f 70       	andi	r18, 0x0F	; 15
    1eec:	8f ad       	ldd	r24, Y+63	; 0x3f
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	82 95       	swap	r24
    1ef4:	92 95       	swap	r25
    1ef6:	90 7f       	andi	r25, 0xF0	; 240
    1ef8:	98 27       	eor	r25, r24
    1efa:	80 7f       	andi	r24, 0xF0	; 240
    1efc:	98 27       	eor	r25, r24
    1efe:	82 2b       	or	r24, r18
    1f00:	8c 93       	st	X, r24
	LCD_Control_PORT |=(1<<LCD_EN);
    1f02:	a5 e3       	ldi	r26, 0x35	; 53
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e3       	ldi	r30, 0x35	; 53
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 68       	ori	r24, 0x80	; 128
    1f0e:	8c 93       	st	X, r24
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e8       	ldi	r26, 0x80	; 128
    1f16:	bf e3       	ldi	r27, 0x3F	; 63
    1f18:	8d 8b       	std	Y+21, r24	; 0x15
    1f1a:	9e 8b       	std	Y+22, r25	; 0x16
    1f1c:	af 8b       	std	Y+23, r26	; 0x17
    1f1e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f20:	6d 89       	ldd	r22, Y+21	; 0x15
    1f22:	7e 89       	ldd	r23, Y+22	; 0x16
    1f24:	8f 89       	ldd	r24, Y+23	; 0x17
    1f26:	98 8d       	ldd	r25, Y+24	; 0x18
    1f28:	29 e8       	ldi	r18, 0x89	; 137
    1f2a:	38 e8       	ldi	r19, 0x88	; 136
    1f2c:	48 e8       	ldi	r20, 0x88	; 136
    1f2e:	5e e3       	ldi	r21, 0x3E	; 62
    1f30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	89 8b       	std	Y+17, r24	; 0x11
    1f3a:	9a 8b       	std	Y+18, r25	; 0x12
    1f3c:	ab 8b       	std	Y+19, r26	; 0x13
    1f3e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f40:	69 89       	ldd	r22, Y+17	; 0x11
    1f42:	7a 89       	ldd	r23, Y+18	; 0x12
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	1c f4       	brge	.+6      	; 0x1f5e <LCD_Send_CMD+0x336>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	88 8b       	std	Y+16, r24	; 0x10
    1f5c:	91 c0       	rjmp	.+290    	; 0x2080 <LCD_Send_CMD+0x458>
	else if (__tmp > 255)
    1f5e:	69 89       	ldd	r22, Y+17	; 0x11
    1f60:	7a 89       	ldd	r23, Y+18	; 0x12
    1f62:	8b 89       	ldd	r24, Y+19	; 0x13
    1f64:	9c 89       	ldd	r25, Y+20	; 0x14
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4f e7       	ldi	r20, 0x7F	; 127
    1f6c:	53 e4       	ldi	r21, 0x43	; 67
    1f6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f72:	18 16       	cp	r1, r24
    1f74:	0c f0       	brlt	.+2      	; 0x1f78 <LCD_Send_CMD+0x350>
    1f76:	7b c0       	rjmp	.+246    	; 0x206e <LCD_Send_CMD+0x446>
	{
		_delay_ms(__us / 1000.0);
    1f78:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a e7       	ldi	r20, 0x7A	; 122
    1f86:	54 e4       	ldi	r21, 0x44	; 68
    1f88:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8c 87       	std	Y+12, r24	; 0x0c
    1f92:	9d 87       	std	Y+13, r25	; 0x0d
    1f94:	ae 87       	std	Y+14, r26	; 0x0e
    1f96:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f9a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f9e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	48 e4       	ldi	r20, 0x48	; 72
    1fa6:	53 e4       	ldi	r21, 0x43	; 67
    1fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	88 87       	std	Y+8, r24	; 0x08
    1fb2:	99 87       	std	Y+9, r25	; 0x09
    1fb4:	aa 87       	std	Y+10, r26	; 0x0a
    1fb6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fb8:	68 85       	ldd	r22, Y+8	; 0x08
    1fba:	79 85       	ldd	r23, Y+9	; 0x09
    1fbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	2c f4       	brge	.+10     	; 0x1fda <LCD_Send_CMD+0x3b2>
		__ticks = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9f 83       	std	Y+7, r25	; 0x07
    1fd6:	8e 83       	std	Y+6, r24	; 0x06
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <LCD_Send_CMD+0x430>
	else if (__tmp > 65535)
    1fda:	68 85       	ldd	r22, Y+8	; 0x08
    1fdc:	79 85       	ldd	r23, Y+9	; 0x09
    1fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	57 e4       	ldi	r21, 0x47	; 71
    1fea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	4c f5       	brge	.+82     	; 0x2044 <LCD_Send_CMD+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ff4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ff6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9f 83       	std	Y+7, r25	; 0x07
    2018:	8e 83       	std	Y+6, r24	; 0x06
    201a:	0f c0       	rjmp	.+30     	; 0x203a <LCD_Send_CMD+0x412>
    201c:	84 e1       	ldi	r24, 0x14	; 20
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9d 83       	std	Y+5, r25	; 0x05
    2022:	8c 83       	std	Y+4, r24	; 0x04
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	9d 81       	ldd	r25, Y+5	; 0x05
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_Send_CMD+0x400>
    202c:	9d 83       	std	Y+5, r25	; 0x05
    202e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2030:	8e 81       	ldd	r24, Y+6	; 0x06
    2032:	9f 81       	ldd	r25, Y+7	; 0x07
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9f 83       	std	Y+7, r25	; 0x07
    2038:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	9f 81       	ldd	r25, Y+7	; 0x07
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	69 f7       	brne	.-38     	; 0x201c <LCD_Send_CMD+0x3f4>
    2042:	24 c0       	rjmp	.+72     	; 0x208c <LCD_Send_CMD+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2044:	68 85       	ldd	r22, Y+8	; 0x08
    2046:	79 85       	ldd	r23, Y+9	; 0x09
    2048:	8a 85       	ldd	r24, Y+10	; 0x0a
    204a:	9b 85       	ldd	r25, Y+11	; 0x0b
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9f 83       	std	Y+7, r25	; 0x07
    2056:	8e 83       	std	Y+6, r24	; 0x06
    2058:	8e 81       	ldd	r24, Y+6	; 0x06
    205a:	9f 81       	ldd	r25, Y+7	; 0x07
    205c:	9b 83       	std	Y+3, r25	; 0x03
    205e:	8a 83       	std	Y+2, r24	; 0x02
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	9b 81       	ldd	r25, Y+3	; 0x03
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_Send_CMD+0x43c>
    2068:	9b 83       	std	Y+3, r25	; 0x03
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	0f c0       	rjmp	.+30     	; 0x208c <LCD_Send_CMD+0x464>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    206e:	69 89       	ldd	r22, Y+17	; 0x11
    2070:	7a 89       	ldd	r23, Y+18	; 0x12
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	88 8b       	std	Y+16, r24	; 0x10
    2080:	88 89       	ldd	r24, Y+16	; 0x10
    2082:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	8a 95       	dec	r24
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_Send_CMD+0x45e>
    208a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    208c:	a5 e3       	ldi	r26, 0x35	; 53
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e5 e3       	ldi	r30, 0x35	; 53
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8f 77       	andi	r24, 0x7F	; 127
    2098:	8c 93       	st	X, r24


}
    209a:	ef 96       	adiw	r28, 0x3f	; 63
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LCD_Send_data>:


void LCD_Send_data(unsigned char data)
{
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	cd 54       	subi	r28, 0x4D	; 77
    20ba:	d0 40       	sbci	r29, 0x00	; 0
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	fe 01       	movw	r30, r28
    20c8:	e3 5b       	subi	r30, 0xB3	; 179
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 83       	st	Z, r24

	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data&0xF0);
    20ce:	a8 e3       	ldi	r26, 0x38	; 56
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e8 e3       	ldi	r30, 0x38	; 56
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	98 2f       	mov	r25, r24
    20da:	9f 70       	andi	r25, 0x0F	; 15
    20dc:	fe 01       	movw	r30, r28
    20de:	e3 5b       	subi	r30, 0xB3	; 179
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	80 7f       	andi	r24, 0xF0	; 240
    20e6:	89 2b       	or	r24, r25
    20e8:	8c 93       	st	X, r24

	LCD_Control_PORT |=(1<<LCD_RS);
    20ea:	a5 e3       	ldi	r26, 0x35	; 53
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e5 e3       	ldi	r30, 0x35	; 53
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 64       	ori	r24, 0x40	; 64
    20f6:	8c 93       	st	X, r24

	LCD_Control_PORT |=(1<<LCD_EN);
    20f8:	a5 e3       	ldi	r26, 0x35	; 53
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e5 e3       	ldi	r30, 0x35	; 53
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	80 68       	ori	r24, 0x80	; 128
    2104:	8c 93       	st	X, r24
    2106:	fe 01       	movw	r30, r28
    2108:	e7 5b       	subi	r30, 0xB7	; 183
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 e8       	ldi	r26, 0x80	; 128
    2112:	bf e3       	ldi	r27, 0x3F	; 63
    2114:	80 83       	st	Z, r24
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	a2 83       	std	Z+2, r26	; 0x02
    211a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    211c:	8e 01       	movw	r16, r28
    211e:	0b 5b       	subi	r16, 0xBB	; 187
    2120:	1f 4f       	sbci	r17, 0xFF	; 255
    2122:	fe 01       	movw	r30, r28
    2124:	e7 5b       	subi	r30, 0xB7	; 183
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	29 e8       	ldi	r18, 0x89	; 137
    2132:	38 e8       	ldi	r19, 0x88	; 136
    2134:	48 e8       	ldi	r20, 0x88	; 136
    2136:	5e e3       	ldi	r21, 0x3E	; 62
    2138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	80 83       	st	Z, r24
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	a2 83       	std	Z+2, r26	; 0x02
    2148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    214a:	fe 01       	movw	r30, r28
    214c:	eb 5b       	subi	r30, 0xBB	; 187
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	34 f4       	brge	.+12     	; 0x2174 <LCD_Send_data+0xc8>
		__ticks = 1;
    2168:	fe 01       	movw	r30, r28
    216a:	ec 5b       	subi	r30, 0xBC	; 188
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	80 83       	st	Z, r24
    2172:	a7 c0       	rjmp	.+334    	; 0x22c2 <LCD_Send_data+0x216>
	else if (__tmp > 255)
    2174:	fe 01       	movw	r30, r28
    2176:	eb 5b       	subi	r30, 0xBB	; 187
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	53 e4       	ldi	r21, 0x43	; 67
    218a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	0c f0       	brlt	.+2      	; 0x2194 <LCD_Send_data+0xe8>
    2192:	87 c0       	rjmp	.+270    	; 0x22a2 <LCD_Send_data+0x1f6>
	{
		_delay_ms(__us / 1000.0);
    2194:	fe 01       	movw	r30, r28
    2196:	e7 5b       	subi	r30, 0xB7	; 183
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a e7       	ldi	r20, 0x7A	; 122
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	fe 01       	movw	r30, r28
    21b4:	e0 5c       	subi	r30, 0xC0	; 192
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 83       	st	Z, r24
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	a2 83       	std	Z+2, r26	; 0x02
    21be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	fe 01       	movw	r30, r28
    21c2:	e0 5c       	subi	r30, 0xC0	; 192
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	48 e4       	ldi	r20, 0x48	; 72
    21d4:	53 e4       	ldi	r21, 0x43	; 67
    21d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8c af       	std	Y+60, r24	; 0x3c
    21e0:	9d af       	std	Y+61, r25	; 0x3d
    21e2:	ae af       	std	Y+62, r26	; 0x3e
    21e4:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    21e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    21e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    21ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <LCD_Send_data+0x15c>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9b af       	std	Y+59, r25	; 0x3b
    2204:	8a af       	std	Y+58, r24	; 0x3a
    2206:	42 c0       	rjmp	.+132    	; 0x228c <LCD_Send_data+0x1e0>
	else if (__tmp > 65535)
    2208:	6c ad       	ldd	r22, Y+60	; 0x3c
    220a:	7d ad       	ldd	r23, Y+61	; 0x3d
    220c:	8e ad       	ldd	r24, Y+62	; 0x3e
    220e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	64 f5       	brge	.+88     	; 0x2278 <LCD_Send_data+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	fe 01       	movw	r30, r28
    2222:	e0 5c       	subi	r30, 0xC0	; 192
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	60 81       	ld	r22, Z
    2228:	71 81       	ldd	r23, Z+1	; 0x01
    222a:	82 81       	ldd	r24, Z+2	; 0x02
    222c:	93 81       	ldd	r25, Z+3	; 0x03
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e2       	ldi	r20, 0x20	; 32
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9b af       	std	Y+59, r25	; 0x3b
    224c:	8a af       	std	Y+58, r24	; 0x3a
    224e:	0f c0       	rjmp	.+30     	; 0x226e <LCD_Send_data+0x1c2>
    2250:	84 e1       	ldi	r24, 0x14	; 20
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	99 af       	std	Y+57, r25	; 0x39
    2256:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2258:	88 ad       	ldd	r24, Y+56	; 0x38
    225a:	99 ad       	ldd	r25, Y+57	; 0x39
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_Send_data+0x1b0>
    2260:	99 af       	std	Y+57, r25	; 0x39
    2262:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	8a ad       	ldd	r24, Y+58	; 0x3a
    2266:	9b ad       	ldd	r25, Y+59	; 0x3b
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9b af       	std	Y+59, r25	; 0x3b
    226c:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2270:	9b ad       	ldd	r25, Y+59	; 0x3b
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	69 f7       	brne	.-38     	; 0x2250 <LCD_Send_data+0x1a4>
    2276:	2e c0       	rjmp	.+92     	; 0x22d4 <LCD_Send_data+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	6c ad       	ldd	r22, Y+60	; 0x3c
    227a:	7d ad       	ldd	r23, Y+61	; 0x3d
    227c:	8e ad       	ldd	r24, Y+62	; 0x3e
    227e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9b af       	std	Y+59, r25	; 0x3b
    228a:	8a af       	std	Y+58, r24	; 0x3a
    228c:	8a ad       	ldd	r24, Y+58	; 0x3a
    228e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2290:	9f ab       	std	Y+55, r25	; 0x37
    2292:	8e ab       	std	Y+54, r24	; 0x36
    2294:	8e a9       	ldd	r24, Y+54	; 0x36
    2296:	9f a9       	ldd	r25, Y+55	; 0x37
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <LCD_Send_data+0x1ec>
    229c:	9f ab       	std	Y+55, r25	; 0x37
    229e:	8e ab       	std	Y+54, r24	; 0x36
    22a0:	19 c0       	rjmp	.+50     	; 0x22d4 <LCD_Send_data+0x228>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22a2:	8e 01       	movw	r16, r28
    22a4:	0c 5b       	subi	r16, 0xBC	; 188
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	fe 01       	movw	r30, r28
    22aa:	eb 5b       	subi	r30, 0xBB	; 187
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	60 81       	ld	r22, Z
    22b0:	71 81       	ldd	r23, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	f8 01       	movw	r30, r16
    22c0:	80 83       	st	Z, r24
    22c2:	fe 01       	movw	r30, r28
    22c4:	ec 5b       	subi	r30, 0xBC	; 188
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22cc:	8d a9       	ldd	r24, Y+53	; 0x35
    22ce:	8a 95       	dec	r24
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LCD_Send_data+0x222>
    22d2:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    22d4:	a5 e3       	ldi	r26, 0x35	; 53
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e5 e3       	ldi	r30, 0x35	; 53
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	8f 77       	andi	r24, 0x7F	; 127
    22e0:	8c 93       	st	X, r24
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e8       	ldi	r26, 0x80	; 128
    22e8:	bf e3       	ldi	r27, 0x3F	; 63
    22ea:	89 ab       	std	Y+49, r24	; 0x31
    22ec:	9a ab       	std	Y+50, r25	; 0x32
    22ee:	ab ab       	std	Y+51, r26	; 0x33
    22f0:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f2:	69 a9       	ldd	r22, Y+49	; 0x31
    22f4:	7a a9       	ldd	r23, Y+50	; 0x32
    22f6:	8b a9       	ldd	r24, Y+51	; 0x33
    22f8:	9c a9       	ldd	r25, Y+52	; 0x34
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	48 e4       	ldi	r20, 0x48	; 72
    2300:	53 e4       	ldi	r21, 0x43	; 67
    2302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	8d a7       	std	Y+45, r24	; 0x2d
    230c:	9e a7       	std	Y+46, r25	; 0x2e
    230e:	af a7       	std	Y+47, r26	; 0x2f
    2310:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2312:	6d a5       	ldd	r22, Y+45	; 0x2d
    2314:	7e a5       	ldd	r23, Y+46	; 0x2e
    2316:	8f a5       	ldd	r24, Y+47	; 0x2f
    2318:	98 a9       	ldd	r25, Y+48	; 0x30
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	2c f4       	brge	.+10     	; 0x2334 <LCD_Send_data+0x288>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9c a7       	std	Y+44, r25	; 0x2c
    2330:	8b a7       	std	Y+43, r24	; 0x2b
    2332:	3f c0       	rjmp	.+126    	; 0x23b2 <LCD_Send_data+0x306>
	else if (__tmp > 65535)
    2334:	6d a5       	ldd	r22, Y+45	; 0x2d
    2336:	7e a5       	ldd	r23, Y+46	; 0x2e
    2338:	8f a5       	ldd	r24, Y+47	; 0x2f
    233a:	98 a9       	ldd	r25, Y+48	; 0x30
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	4c f5       	brge	.+82     	; 0x239e <LCD_Send_data+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	69 a9       	ldd	r22, Y+49	; 0x31
    234e:	7a a9       	ldd	r23, Y+50	; 0x32
    2350:	8b a9       	ldd	r24, Y+51	; 0x33
    2352:	9c a9       	ldd	r25, Y+52	; 0x34
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e2       	ldi	r20, 0x20	; 32
    235a:	51 e4       	ldi	r21, 0x41	; 65
    235c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9c a7       	std	Y+44, r25	; 0x2c
    2372:	8b a7       	std	Y+43, r24	; 0x2b
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <LCD_Send_data+0x2e8>
    2376:	84 e1       	ldi	r24, 0x14	; 20
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9a a7       	std	Y+42, r25	; 0x2a
    237c:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    237e:	89 a5       	ldd	r24, Y+41	; 0x29
    2380:	9a a5       	ldd	r25, Y+42	; 0x2a
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_Send_data+0x2d6>
    2386:	9a a7       	std	Y+42, r25	; 0x2a
    2388:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	8b a5       	ldd	r24, Y+43	; 0x2b
    238c:	9c a5       	ldd	r25, Y+44	; 0x2c
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	9c a7       	std	Y+44, r25	; 0x2c
    2392:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	8b a5       	ldd	r24, Y+43	; 0x2b
    2396:	9c a5       	ldd	r25, Y+44	; 0x2c
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	69 f7       	brne	.-38     	; 0x2376 <LCD_Send_data+0x2ca>
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <LCD_Send_data+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239e:	6d a5       	ldd	r22, Y+45	; 0x2d
    23a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    23a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a4:	98 a9       	ldd	r25, Y+48	; 0x30
    23a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9c a7       	std	Y+44, r25	; 0x2c
    23b0:	8b a7       	std	Y+43, r24	; 0x2b
    23b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b6:	98 a7       	std	Y+40, r25	; 0x28
    23b8:	8f a3       	std	Y+39, r24	; 0x27
    23ba:	8f a1       	ldd	r24, Y+39	; 0x27
    23bc:	98 a5       	ldd	r25, Y+40	; 0x28
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_Send_data+0x312>
    23c2:	98 a7       	std	Y+40, r25	; 0x28
    23c4:	8f a3       	std	Y+39, r24	; 0x27


	_delay_ms(1);


	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data<<4);
    23c6:	a8 e3       	ldi	r26, 0x38	; 56
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e8 e3       	ldi	r30, 0x38	; 56
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	2f 70       	andi	r18, 0x0F	; 15
    23d4:	fe 01       	movw	r30, r28
    23d6:	e3 5b       	subi	r30, 0xB3	; 179
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	82 95       	swap	r24
    23e2:	92 95       	swap	r25
    23e4:	90 7f       	andi	r25, 0xF0	; 240
    23e6:	98 27       	eor	r25, r24
    23e8:	80 7f       	andi	r24, 0xF0	; 240
    23ea:	98 27       	eor	r25, r24
    23ec:	82 2b       	or	r24, r18
    23ee:	8c 93       	st	X, r24
	LCD_Control_PORT |=(1<<LCD_EN);
    23f0:	a5 e3       	ldi	r26, 0x35	; 53
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e5 e3       	ldi	r30, 0x35	; 53
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	80 68       	ori	r24, 0x80	; 128
    23fc:	8c 93       	st	X, r24
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e8       	ldi	r26, 0x80	; 128
    2404:	bf e3       	ldi	r27, 0x3F	; 63
    2406:	8b a3       	std	Y+35, r24	; 0x23
    2408:	9c a3       	std	Y+36, r25	; 0x24
    240a:	ad a3       	std	Y+37, r26	; 0x25
    240c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    240e:	6b a1       	ldd	r22, Y+35	; 0x23
    2410:	7c a1       	ldd	r23, Y+36	; 0x24
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	9e a1       	ldd	r25, Y+38	; 0x26
    2416:	29 e8       	ldi	r18, 0x89	; 137
    2418:	38 e8       	ldi	r19, 0x88	; 136
    241a:	48 e8       	ldi	r20, 0x88	; 136
    241c:	5e e3       	ldi	r21, 0x3E	; 62
    241e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8f 8f       	std	Y+31, r24	; 0x1f
    2428:	98 a3       	std	Y+32, r25	; 0x20
    242a:	a9 a3       	std	Y+33, r26	; 0x21
    242c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    242e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2430:	78 a1       	ldd	r23, Y+32	; 0x20
    2432:	89 a1       	ldd	r24, Y+33	; 0x21
    2434:	9a a1       	ldd	r25, Y+34	; 0x22
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	1c f4       	brge	.+6      	; 0x244c <LCD_Send_data+0x3a0>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	8e 8f       	std	Y+30, r24	; 0x1e
    244a:	91 c0       	rjmp	.+290    	; 0x256e <LCD_Send_data+0x4c2>
	else if (__tmp > 255)
    244c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    244e:	78 a1       	ldd	r23, Y+32	; 0x20
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	9a a1       	ldd	r25, Y+34	; 0x22
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4f e7       	ldi	r20, 0x7F	; 127
    245a:	53 e4       	ldi	r21, 0x43	; 67
    245c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2460:	18 16       	cp	r1, r24
    2462:	0c f0       	brlt	.+2      	; 0x2466 <LCD_Send_data+0x3ba>
    2464:	7b c0       	rjmp	.+246    	; 0x255c <LCD_Send_data+0x4b0>
	{
		_delay_ms(__us / 1000.0);
    2466:	6b a1       	ldd	r22, Y+35	; 0x23
    2468:	7c a1       	ldd	r23, Y+36	; 0x24
    246a:	8d a1       	ldd	r24, Y+37	; 0x25
    246c:	9e a1       	ldd	r25, Y+38	; 0x26
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a e7       	ldi	r20, 0x7A	; 122
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	8a 8f       	std	Y+26, r24	; 0x1a
    2480:	9b 8f       	std	Y+27, r25	; 0x1b
    2482:	ac 8f       	std	Y+28, r26	; 0x1c
    2484:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2488:	7b 8d       	ldd	r23, Y+27	; 0x1b
    248a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    248c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	48 e4       	ldi	r20, 0x48	; 72
    2494:	53 e4       	ldi	r21, 0x43	; 67
    2496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8e 8b       	std	Y+22, r24	; 0x16
    24a0:	9f 8b       	std	Y+23, r25	; 0x17
    24a2:	a8 8f       	std	Y+24, r26	; 0x18
    24a4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    24a6:	6e 89       	ldd	r22, Y+22	; 0x16
    24a8:	7f 89       	ldd	r23, Y+23	; 0x17
    24aa:	88 8d       	ldd	r24, Y+24	; 0x18
    24ac:	99 8d       	ldd	r25, Y+25	; 0x19
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <LCD_Send_data+0x41c>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9d 8b       	std	Y+21, r25	; 0x15
    24c4:	8c 8b       	std	Y+20, r24	; 0x14
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <LCD_Send_data+0x49a>
	else if (__tmp > 65535)
    24c8:	6e 89       	ldd	r22, Y+22	; 0x16
    24ca:	7f 89       	ldd	r23, Y+23	; 0x17
    24cc:	88 8d       	ldd	r24, Y+24	; 0x18
    24ce:	99 8d       	ldd	r25, Y+25	; 0x19
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <LCD_Send_data+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24e2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9d 8b       	std	Y+21, r25	; 0x15
    2506:	8c 8b       	std	Y+20, r24	; 0x14
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <LCD_Send_data+0x47c>
    250a:	84 e1       	ldi	r24, 0x14	; 20
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9b 8b       	std	Y+19, r25	; 0x13
    2510:	8a 8b       	std	Y+18, r24	; 0x12
    2512:	8a 89       	ldd	r24, Y+18	; 0x12
    2514:	9b 89       	ldd	r25, Y+19	; 0x13
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <LCD_Send_data+0x46a>
    251a:	9b 8b       	std	Y+19, r25	; 0x13
    251c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	8c 89       	ldd	r24, Y+20	; 0x14
    2520:	9d 89       	ldd	r25, Y+21	; 0x15
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9d 8b       	std	Y+21, r25	; 0x15
    2526:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	8c 89       	ldd	r24, Y+20	; 0x14
    252a:	9d 89       	ldd	r25, Y+21	; 0x15
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <LCD_Send_data+0x45e>
    2530:	24 c0       	rjmp	.+72     	; 0x257a <LCD_Send_data+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	6e 89       	ldd	r22, Y+22	; 0x16
    2534:	7f 89       	ldd	r23, Y+23	; 0x17
    2536:	88 8d       	ldd	r24, Y+24	; 0x18
    2538:	99 8d       	ldd	r25, Y+25	; 0x19
    253a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9d 8b       	std	Y+21, r25	; 0x15
    2544:	8c 8b       	std	Y+20, r24	; 0x14
    2546:	8c 89       	ldd	r24, Y+20	; 0x14
    2548:	9d 89       	ldd	r25, Y+21	; 0x15
    254a:	99 8b       	std	Y+17, r25	; 0x11
    254c:	88 8b       	std	Y+16, r24	; 0x10
    254e:	88 89       	ldd	r24, Y+16	; 0x10
    2550:	99 89       	ldd	r25, Y+17	; 0x11
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <LCD_Send_data+0x4a6>
    2556:	99 8b       	std	Y+17, r25	; 0x11
    2558:	88 8b       	std	Y+16, r24	; 0x10
    255a:	0f c0       	rjmp	.+30     	; 0x257a <LCD_Send_data+0x4ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    255c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    255e:	78 a1       	ldd	r23, Y+32	; 0x20
    2560:	89 a1       	ldd	r24, Y+33	; 0x21
    2562:	9a a1       	ldd	r25, Y+34	; 0x22
    2564:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	8e 8f       	std	Y+30, r24	; 0x1e
    256e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2570:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2572:	8f 85       	ldd	r24, Y+15	; 0x0f
    2574:	8a 95       	dec	r24
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_Send_data+0x4c8>
    2578:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Control_PORT &=~(1<<LCD_EN);
    257a:	a5 e3       	ldi	r26, 0x35	; 53
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e5 e3       	ldi	r30, 0x35	; 53
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	8f 77       	andi	r24, 0x7F	; 127
    2586:	8c 93       	st	X, r24
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e8       	ldi	r26, 0x80	; 128
    258e:	bf e3       	ldi	r27, 0x3F	; 63
    2590:	8b 87       	std	Y+11, r24	; 0x0b
    2592:	9c 87       	std	Y+12, r25	; 0x0c
    2594:	ad 87       	std	Y+13, r26	; 0x0d
    2596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	48 e4       	ldi	r20, 0x48	; 72
    25a6:	53 e4       	ldi	r21, 0x43	; 67
    25a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8f 83       	std	Y+7, r24	; 0x07
    25b2:	98 87       	std	Y+8, r25	; 0x08
    25b4:	a9 87       	std	Y+9, r26	; 0x09
    25b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <LCD_Send_data+0x52e>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <LCD_Send_data+0x5ac>
	else if (__tmp > 65535)
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <LCD_Send_data+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	0f c0       	rjmp	.+30     	; 0x263a <LCD_Send_data+0x58e>
    261c:	84 e1       	ldi	r24, 0x14	; 20
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_Send_data+0x57c>
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	69 f7       	brne	.-38     	; 0x261c <LCD_Send_data+0x570>
    2642:	14 c0       	rjmp	.+40     	; 0x266c <LCD_Send_data+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_Send_data+0x5b8>
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    266c:	c3 5b       	subi	r28, 0xB3	; 179
    266e:	df 4f       	sbci	r29, 0xFF	; 255
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <LCD_Send_string>:


void LCD_Send_string(unsigned char* str)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	00 d0       	rcall	.+0      	; 0x268a <LCD_Send_string+0x6>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	0b c0       	rjmp	.+22     	; 0x26aa <LCD_Send_string+0x26>

	while(*str!='\0')
	{
		LCD_Send_data(*str++);
    2694:	e9 81       	ldd	r30, Y+1	; 0x01
    2696:	fa 81       	ldd	r31, Y+2	; 0x02
    2698:	20 81       	ld	r18, Z
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	82 2f       	mov	r24, r18
    26a6:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_Send_data>


void LCD_Send_string(unsigned char* str)
{

	while(*str!='\0')
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	80 81       	ld	r24, Z
    26b0:	88 23       	and	r24, r24
    26b2:	81 f7       	brne	.-32     	; 0x2694 <LCD_Send_string+0x10>
		LCD_Send_data(*str++);

	}


}
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <LCD_go_to>:

void LCD_go_to(unsigned char y,unsigned char x)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	60 97       	sbiw	r28, 0x10	; 16
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	8f 87       	std	Y+15, r24	; 0x0f
    26d4:	68 8b       	std	Y+16, r22	; 0x10

	if(y==1)
    26d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	29 f4       	brne	.+10     	; 0x26e6 <LCD_go_to+0x28>
	{
		LCD_Send_CMD(0x80+x-1);
    26dc:	88 89       	ldd	r24, Y+16	; 0x10
    26de:	81 58       	subi	r24, 0x81	; 129
    26e0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    26e4:	07 c0       	rjmp	.+14     	; 0x26f4 <LCD_go_to+0x36>
	}
	else if(y==2)
    26e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	21 f4       	brne	.+8      	; 0x26f4 <LCD_go_to+0x36>
	{
		LCD_Send_CMD(0xC0+x-1);
    26ec:	88 89       	ldd	r24, Y+16	; 0x10
    26ee:	81 54       	subi	r24, 0x41	; 65
    26f0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e8       	ldi	r26, 0x80	; 128
    26fa:	bf e3       	ldi	r27, 0x3F	; 63
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
    2700:	ad 87       	std	Y+13, r26	; 0x0d
    2702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	48 e4       	ldi	r20, 0x48	; 72
    2712:	53 e4       	ldi	r21, 0x43	; 67
    2714:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	a9 87       	std	Y+9, r26	; 0x09
    2722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <LCD_go_to+0x88>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <LCD_go_to+0x106>
	else if (__tmp > 65535)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <LCD_go_to+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2760:	7c 85       	ldd	r23, Y+12	; 0x0c
    2762:	8d 85       	ldd	r24, Y+13	; 0x0d
    2764:	9e 85       	ldd	r25, Y+14	; 0x0e
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <LCD_go_to+0xe8>
    2788:	84 e1       	ldi	r24, 0x14	; 20
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_go_to+0xd6>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <LCD_go_to+0xca>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <LCD_go_to+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_go_to+0x112>
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(1);
}
    27d8:	60 96       	adiw	r28, 0x10	; 16
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <clear_lcd>:
void clear_lcd ()
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	68 97       	sbiw	r28, 0x18	; 24
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
     	LCD_Send_CMD(0x01);                    //clear LCD
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_Send_CMD>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	aa ef       	ldi	r26, 0xFA	; 250
    280a:	b4 e4       	ldi	r27, 0x44	; 68
    280c:	8d 8b       	std	Y+21, r24	; 0x15
    280e:	9e 8b       	std	Y+22, r25	; 0x16
    2810:	af 8b       	std	Y+23, r26	; 0x17
    2812:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2814:	6d 89       	ldd	r22, Y+21	; 0x15
    2816:	7e 89       	ldd	r23, Y+22	; 0x16
    2818:	8f 89       	ldd	r24, Y+23	; 0x17
    281a:	98 8d       	ldd	r25, Y+24	; 0x18
    281c:	29 e8       	ldi	r18, 0x89	; 137
    281e:	38 e8       	ldi	r19, 0x88	; 136
    2820:	48 e8       	ldi	r20, 0x88	; 136
    2822:	5e e3       	ldi	r21, 0x3E	; 62
    2824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	89 8b       	std	Y+17, r24	; 0x11
    282e:	9a 8b       	std	Y+18, r25	; 0x12
    2830:	ab 8b       	std	Y+19, r26	; 0x13
    2832:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2834:	69 89       	ldd	r22, Y+17	; 0x11
    2836:	7a 89       	ldd	r23, Y+18	; 0x12
    2838:	8b 89       	ldd	r24, Y+19	; 0x13
    283a:	9c 89       	ldd	r25, Y+20	; 0x14
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	1c f4       	brge	.+6      	; 0x2852 <clear_lcd+0x68>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	88 8b       	std	Y+16, r24	; 0x10
    2850:	91 c0       	rjmp	.+290    	; 0x2974 <clear_lcd+0x18a>
	else if (__tmp > 255)
    2852:	69 89       	ldd	r22, Y+17	; 0x11
    2854:	7a 89       	ldd	r23, Y+18	; 0x12
    2856:	8b 89       	ldd	r24, Y+19	; 0x13
    2858:	9c 89       	ldd	r25, Y+20	; 0x14
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	53 e4       	ldi	r21, 0x43	; 67
    2862:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	0c f0       	brlt	.+2      	; 0x286c <clear_lcd+0x82>
    286a:	7b c0       	rjmp	.+246    	; 0x2962 <clear_lcd+0x178>
	{
		_delay_ms(__us / 1000.0);
    286c:	6d 89       	ldd	r22, Y+21	; 0x15
    286e:	7e 89       	ldd	r23, Y+22	; 0x16
    2870:	8f 89       	ldd	r24, Y+23	; 0x17
    2872:	98 8d       	ldd	r25, Y+24	; 0x18
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4a e7       	ldi	r20, 0x7A	; 122
    287a:	54 e4       	ldi	r21, 0x44	; 68
    287c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	8c 87       	std	Y+12, r24	; 0x0c
    2886:	9d 87       	std	Y+13, r25	; 0x0d
    2888:	ae 87       	std	Y+14, r26	; 0x0e
    288a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288c:	6c 85       	ldd	r22, Y+12	; 0x0c
    288e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2890:	8e 85       	ldd	r24, Y+14	; 0x0e
    2892:	9f 85       	ldd	r25, Y+15	; 0x0f
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	48 e4       	ldi	r20, 0x48	; 72
    289a:	53 e4       	ldi	r21, 0x43	; 67
    289c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	88 87       	std	Y+8, r24	; 0x08
    28a6:	99 87       	std	Y+9, r25	; 0x09
    28a8:	aa 87       	std	Y+10, r26	; 0x0a
    28aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28ac:	68 85       	ldd	r22, Y+8	; 0x08
    28ae:	79 85       	ldd	r23, Y+9	; 0x09
    28b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <clear_lcd+0xe4>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9f 83       	std	Y+7, r25	; 0x07
    28ca:	8e 83       	std	Y+6, r24	; 0x06
    28cc:	3f c0       	rjmp	.+126    	; 0x294c <clear_lcd+0x162>
	else if (__tmp > 65535)
    28ce:	68 85       	ldd	r22, Y+8	; 0x08
    28d0:	79 85       	ldd	r23, Y+9	; 0x09
    28d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	4c f5       	brge	.+82     	; 0x2938 <clear_lcd+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    28e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    28ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e2       	ldi	r20, 0x20	; 32
    28f4:	51 e4       	ldi	r21, 0x41	; 65
    28f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9f 83       	std	Y+7, r25	; 0x07
    290c:	8e 83       	std	Y+6, r24	; 0x06
    290e:	0f c0       	rjmp	.+30     	; 0x292e <clear_lcd+0x144>
    2910:	84 e1       	ldi	r24, 0x14	; 20
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9d 83       	std	Y+5, r25	; 0x05
    2916:	8c 83       	std	Y+4, r24	; 0x04
    2918:	8c 81       	ldd	r24, Y+4	; 0x04
    291a:	9d 81       	ldd	r25, Y+5	; 0x05
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <clear_lcd+0x132>
    2920:	9d 83       	std	Y+5, r25	; 0x05
    2922:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	8e 81       	ldd	r24, Y+6	; 0x06
    2926:	9f 81       	ldd	r25, Y+7	; 0x07
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	9f 83       	std	Y+7, r25	; 0x07
    292c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	8e 81       	ldd	r24, Y+6	; 0x06
    2930:	9f 81       	ldd	r25, Y+7	; 0x07
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	69 f7       	brne	.-38     	; 0x2910 <clear_lcd+0x126>
    2936:	24 c0       	rjmp	.+72     	; 0x2980 <clear_lcd+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2938:	68 85       	ldd	r22, Y+8	; 0x08
    293a:	79 85       	ldd	r23, Y+9	; 0x09
    293c:	8a 85       	ldd	r24, Y+10	; 0x0a
    293e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2940:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9f 83       	std	Y+7, r25	; 0x07
    294a:	8e 83       	std	Y+6, r24	; 0x06
    294c:	8e 81       	ldd	r24, Y+6	; 0x06
    294e:	9f 81       	ldd	r25, Y+7	; 0x07
    2950:	9b 83       	std	Y+3, r25	; 0x03
    2952:	8a 83       	std	Y+2, r24	; 0x02
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	9b 81       	ldd	r25, Y+3	; 0x03
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <clear_lcd+0x16e>
    295c:	9b 83       	std	Y+3, r25	; 0x03
    295e:	8a 83       	std	Y+2, r24	; 0x02
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <clear_lcd+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2962:	69 89       	ldd	r22, Y+17	; 0x11
    2964:	7a 89       	ldd	r23, Y+18	; 0x12
    2966:	8b 89       	ldd	r24, Y+19	; 0x13
    2968:	9c 89       	ldd	r25, Y+20	; 0x14
    296a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	88 8b       	std	Y+16, r24	; 0x10
    2974:	88 89       	ldd	r24, Y+16	; 0x10
    2976:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	8a 95       	dec	r24
    297c:	f1 f7       	brne	.-4      	; 0x297a <clear_lcd+0x190>
    297e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);
}
    2980:	68 96       	adiw	r28, 0x18	; 24
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <main>:
 */
#include<avr/io.h>
#include<util/delay.h>

int main()
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	66 97       	sbiw	r28, 0x16	; 22
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    29a6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <LCD_init>
		init_uart();
    29aa:	0e 94 11 1a 	call	0x3422	; 0x3422 <init_uart>
		seven_segment_init();
    29ae:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <seven_segment_init>
		ADC_init();
    29b2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>
	unsigned char mode =0;
    29b6:	1c 8a       	std	Y+20, r1	; 0x14
	unsigned int ADC_reading=0;
    29b8:	1b 8a       	std	Y+19, r1	; 0x13
    29ba:	1a 8a       	std	Y+18, r1	; 0x12
		unsigned int reading_in_mv=0;
    29bc:	19 8a       	std	Y+17, r1	; 0x11
    29be:	18 8a       	std	Y+16, r1	; 0x10
		unsigned char temp=0;
    29c0:	1f 86       	std	Y+15, r1	; 0x0f

		send_one_letter('A');
    29c2:	81 e4       	ldi	r24, 0x41	; 65
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	0e 94 56 1b 	call	0x36ac	; 0x36ac <send_one_letter>
	 UART_SEND_string("ALI MOHAMED ELSIAD ");
    29ca:	80 e6       	ldi	r24, 0x60	; 96
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <UART_SEND_string>
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	aa e7       	ldi	r26, 0x7A	; 122
    29d8:	b4 e4       	ldi	r27, 0x44	; 68
    29da:	8b 87       	std	Y+11, r24	; 0x0b
    29dc:	9c 87       	std	Y+12, r25	; 0x0c
    29de:	ad 87       	std	Y+13, r26	; 0x0d
    29e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	48 e4       	ldi	r20, 0x48	; 72
    29f0:	53 e4       	ldi	r21, 0x43	; 67
    29f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	8f 83       	std	Y+7, r24	; 0x07
    29fc:	98 87       	std	Y+8, r25	; 0x08
    29fe:	a9 87       	std	Y+9, r26	; 0x09
    2a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a02:	6f 81       	ldd	r22, Y+7	; 0x07
    2a04:	78 85       	ldd	r23, Y+8	; 0x08
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e8       	ldi	r20, 0x80	; 128
    2a10:	5f e3       	ldi	r21, 0x3F	; 63
    2a12:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a16:	88 23       	and	r24, r24
    2a18:	2c f4       	brge	.+10     	; 0x2a24 <main+0x92>
		__ticks = 1;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	3f c0       	rjmp	.+126    	; 0x2aa2 <main+0x110>
	else if (__tmp > 65535)
    2a24:	6f 81       	ldd	r22, Y+7	; 0x07
    2a26:	78 85       	ldd	r23, Y+8	; 0x08
    2a28:	89 85       	ldd	r24, Y+9	; 0x09
    2a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	3f ef       	ldi	r19, 0xFF	; 255
    2a30:	4f e7       	ldi	r20, 0x7F	; 127
    2a32:	57 e4       	ldi	r21, 0x47	; 71
    2a34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a38:	18 16       	cp	r1, r24
    2a3a:	4c f5       	brge	.+82     	; 0x2a8e <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e2       	ldi	r20, 0x20	; 32
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
    2a64:	0f c0       	rjmp	.+30     	; 0x2a84 <main+0xf2>
    2a66:	84 e1       	ldi	r24, 0x14	; 20
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <main+0xe0>
    2a76:	9c 83       	std	Y+4, r25	; 0x04
    2a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <main+0xd4>
    2a8c:	14 c0       	rjmp	.+40     	; 0x2ab6 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <main+0x11c>
    2ab2:	9a 83       	std	Y+2, r25	; 0x02
    2ab4:	89 83       	std	Y+1, r24	; 0x01

	 _delay_ms(1000);
	mode= receive_the_letter();
    2ab6:	0e 94 66 1b 	call	0x36cc	; 0x36cc <receive_the_letter>
    2aba:	8c 8b       	std	Y+20, r24	; 0x14

	switch(mode)
    2abc:	8c 89       	ldd	r24, Y+20	; 0x14
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	3e 8b       	std	Y+22, r19	; 0x16
    2ac4:	2d 8b       	std	Y+21, r18	; 0x15
    2ac6:	8d 89       	ldd	r24, Y+21	; 0x15
    2ac8:	9e 89       	ldd	r25, Y+22	; 0x16
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	91 05       	cpc	r25, r1
    2ace:	31 f0       	breq	.+12     	; 0x2adc <main+0x14a>
    2ad0:	2d 89       	ldd	r18, Y+21	; 0x15
    2ad2:	3e 89       	ldd	r19, Y+22	; 0x16
    2ad4:	22 30       	cpi	r18, 0x02	; 2
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	91 f0       	breq	.+36     	; 0x2afe <main+0x16c>
    2ada:	63 c0       	rjmp	.+198    	; 0x2ba2 <main+0x210>
	{
	case 1:
		counter_7_segment();
    2adc:	0e 94 8f 1b 	call	0x371e	; 0x371e <counter_7_segment>
		 UART_SEND_string(" counting now ");
    2ae0:	84 e7       	ldi	r24, 0x74	; 116
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <UART_SEND_string>
		 LCD_go_to(1,1);
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_go_to>
		 LCD_Send_string("counting now");
    2af4:	83 e8       	ldi	r24, 0x83	; 131
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 42 13 	call	0x2684	; 0x2684 <LCD_Send_string>
    2afc:	52 c0       	rjmp	.+164    	; 0x2ba2 <main+0x210>
		break;
	case 2:
		while(1)
		{
		        ADC_reading=ADC_Get_Reading_mv(6);
    2afe:	86 e0       	ldi	r24, 0x06	; 6
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 1e 07 	call	0xe3c	; 0xe3c <ADC_Get_Reading_mv>
    2b06:	9b 8b       	std	Y+19, r25	; 0x13
    2b08:	8a 8b       	std	Y+18, r24	; 0x12
				reading_in_mv=ADC_reading*4.88;
    2b0a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b0c:	9b 89       	ldd	r25, Y+19	; 0x13
    2b0e:	cc 01       	movw	r24, r24
    2b10:	a0 e0       	ldi	r26, 0x00	; 0
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	26 ef       	ldi	r18, 0xF6	; 246
    2b26:	38 e2       	ldi	r19, 0x28	; 40
    2b28:	4c e9       	ldi	r20, 0x9C	; 156
    2b2a:	50 e4       	ldi	r21, 0x40	; 64
    2b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	99 8b       	std	Y+17, r25	; 0x11
    2b42:	88 8b       	std	Y+16, r24	; 0x10
				temp=reading_in_mv/10;
    2b44:	88 89       	ldd	r24, Y+16	; 0x10
    2b46:	99 89       	ldd	r25, Y+17	; 0x11
    2b48:	2a e0       	ldi	r18, 0x0A	; 10
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	b9 01       	movw	r22, r18
    2b4e:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    2b52:	cb 01       	movw	r24, r22
    2b54:	8f 87       	std	Y+15, r24	; 0x0f
				display_4_Digits_7Segment(temp);
    2b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <display_4_Digits_7Segment>
		 UART_SEND_string("  temperature is : ");
    2b60:	80 e9       	ldi	r24, 0x90	; 144
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <UART_SEND_string>
		 UART_SEND_string(temp+30);
    2b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	4e 96       	adiw	r24, 0x1e	; 30
    2b70:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <UART_SEND_string>
		 LCD_go_to(1,1);
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_go_to>
		 LCD_Send_string("temp is :");
    2b80:	84 ea       	ldi	r24, 0xA4	; 164
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 42 13 	call	0x2684	; 0x2684 <LCD_Send_string>
		 LCD_go_to(2,5);
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	65 e0       	ldi	r22, 0x05	; 5
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_go_to>
		 LCD_Send_string(temp+30);
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	4e 96       	adiw	r24, 0x1e	; 30
    2b9c:	0e 94 42 13 	call	0x2684	; 0x2684 <LCD_Send_string>
    2ba0:	ae cf       	rjmp	.-164    	; 0x2afe <main+0x16c>





	return 0;
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
}
    2ba6:	66 96       	adiw	r28, 0x16	; 22
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <seven_segment_init>:
void seven_segment_init(void);
void display_4_Digits_7Segment(unsigned int number);


void seven_segment_init(void)
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <seven_segment_init+0x6>
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62

	DDRB=0x0F;
    2bc2:	e7 e3       	ldi	r30, 0x37	; 55
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	8f e0       	ldi	r24, 0x0F	; 15
    2bc8:	80 83       	st	Z, r24
	DDRC=0b00111100;
    2bca:	e4 e3       	ldi	r30, 0x34	; 52
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	8c e3       	ldi	r24, 0x3C	; 60
    2bd0:	80 83       	st	Z, r24
	for(int i=0;i<10;i++)
    2bd2:	1a 82       	std	Y+2, r1	; 0x02
    2bd4:	19 82       	std	Y+1, r1	; 0x01
    2bd6:	09 c0       	rjmp	.+18     	; 0x2bea <seven_segment_init+0x32>
	{
	PORTB=i;
    2bd8:	e8 e3       	ldi	r30, 0x38	; 56
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	80 83       	st	Z, r24
void seven_segment_init(void)
{

	DDRB=0x0F;
	DDRC=0b00111100;
	for(int i=0;i<10;i++)
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	8a 30       	cpi	r24, 0x0A	; 10
    2bf0:	91 05       	cpc	r25, r1
    2bf2:	94 f3       	brlt	.-28     	; 0x2bd8 <seven_segment_init+0x20>
	{
	PORTB=i;
	}

}
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <display_4_Digits_7Segment>:

void display_4_Digits_7Segment(unsigned int number)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	c0 54       	subi	r28, 0x40	; 64
    2c08:	d0 40       	sbci	r29, 0x00	; 0
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	fe 01       	movw	r30, r28
    2c16:	ff 96       	adiw	r30, 0x3f	; 63
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24

	unsigned char digit1=0,digit2=0,digit3=0,digit4=0;
    2c1c:	1e ae       	std	Y+62, r1	; 0x3e
    2c1e:	1d ae       	std	Y+61, r1	; 0x3d
    2c20:	1c ae       	std	Y+60, r1	; 0x3c
    2c22:	1b ae       	std	Y+59, r1	; 0x3b
	unsigned int temp=0;
    2c24:	1a ae       	std	Y+58, r1	; 0x3a
    2c26:	19 ae       	std	Y+57, r1	; 0x39


	digit4=number/1000;
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ff 96       	adiw	r30, 0x3f	; 63
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	28 ee       	ldi	r18, 0xE8	; 232
    2c32:	33 e0       	ldi	r19, 0x03	; 3
    2c34:	b9 01       	movw	r22, r18
    2c36:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8b af       	std	Y+59, r24	; 0x3b
	temp=number%1000;
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ff 96       	adiw	r30, 0x3f	; 63
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	28 ee       	ldi	r18, 0xE8	; 232
    2c48:	33 e0       	ldi	r19, 0x03	; 3
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    2c50:	9a af       	std	Y+58, r25	; 0x3a
    2c52:	89 af       	std	Y+57, r24	; 0x39

	digit3=temp/100;
    2c54:	89 ad       	ldd	r24, Y+57	; 0x39
    2c56:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c58:	24 e6       	ldi	r18, 0x64	; 100
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	b9 01       	movw	r22, r18
    2c5e:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    2c62:	cb 01       	movw	r24, r22
    2c64:	8c af       	std	Y+60, r24	; 0x3c
	temp=temp%100;
    2c66:	89 ad       	ldd	r24, Y+57	; 0x39
    2c68:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c6a:	24 e6       	ldi	r18, 0x64	; 100
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	b9 01       	movw	r22, r18
    2c70:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    2c74:	9a af       	std	Y+58, r25	; 0x3a
    2c76:	89 af       	std	Y+57, r24	; 0x39

	digit2=temp/10;
    2c78:	89 ad       	ldd	r24, Y+57	; 0x39
    2c7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c7c:	2a e0       	ldi	r18, 0x0A	; 10
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	b9 01       	movw	r22, r18
    2c82:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    2c86:	cb 01       	movw	r24, r22
    2c88:	8d af       	std	Y+61, r24	; 0x3d

	digit1=temp%10;
    2c8a:	89 ad       	ldd	r24, Y+57	; 0x39
    2c8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c8e:	2a e0       	ldi	r18, 0x0A	; 10
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	b9 01       	movw	r22, r18
    2c94:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    2c98:	8e af       	std	Y+62, r24	; 0x3e


	if(number>1000)
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ff 96       	adiw	r30, 0x3f	; 63
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	23 e0       	ldi	r18, 0x03	; 3
    2ca4:	89 3e       	cpi	r24, 0xE9	; 233
    2ca6:	92 07       	cpc	r25, r18
    2ca8:	08 f4       	brcc	.+2      	; 0x2cac <display_4_Digits_7Segment+0xae>
    2caa:	92 c0       	rjmp	.+292    	; 0x2dd0 <display_4_Digits_7Segment+0x1d2>
	{

		PORTC &=~(1<<PC5);
    2cac:	a5 e3       	ldi	r26, 0x35	; 53
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e5 e3       	ldi	r30, 0x35	; 53
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	8f 7d       	andi	r24, 0xDF	; 223
    2cb8:	8c 93       	st	X, r24
		PORTC |=(1<<PC4);
    2cba:	a5 e3       	ldi	r26, 0x35	; 53
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e5 e3       	ldi	r30, 0x35	; 53
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 61       	ori	r24, 0x10	; 16
    2cc6:	8c 93       	st	X, r24
		PORTC |=(1<<PC3);
    2cc8:	a5 e3       	ldi	r26, 0x35	; 53
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e5 e3       	ldi	r30, 0x35	; 53
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	88 60       	ori	r24, 0x08	; 8
    2cd4:	8c 93       	st	X, r24
		PORTC |=(1<<PC2);
    2cd6:	a5 e3       	ldi	r26, 0x35	; 53
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e5 e3       	ldi	r30, 0x35	; 53
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	84 60       	ori	r24, 0x04	; 4
    2ce2:	8c 93       	st	X, r24
		PORTB = digit4;
    2ce4:	e8 e3       	ldi	r30, 0x38	; 56
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cea:	80 83       	st	Z, r24
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 ea       	ldi	r26, 0xA0	; 160
    2cf2:	b0 e4       	ldi	r27, 0x40	; 64
    2cf4:	8d ab       	std	Y+53, r24	; 0x35
    2cf6:	9e ab       	std	Y+54, r25	; 0x36
    2cf8:	af ab       	std	Y+55, r26	; 0x37
    2cfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	6d a9       	ldd	r22, Y+53	; 0x35
    2cfe:	7e a9       	ldd	r23, Y+54	; 0x36
    2d00:	8f a9       	ldd	r24, Y+55	; 0x37
    2d02:	98 ad       	ldd	r25, Y+56	; 0x38
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	48 e4       	ldi	r20, 0x48	; 72
    2d0a:	53 e4       	ldi	r21, 0x43	; 67
    2d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	89 ab       	std	Y+49, r24	; 0x31
    2d16:	9a ab       	std	Y+50, r25	; 0x32
    2d18:	ab ab       	std	Y+51, r26	; 0x33
    2d1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d20:	8b a9       	ldd	r24, Y+51	; 0x33
    2d22:	9c a9       	ldd	r25, Y+52	; 0x34
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <display_4_Digits_7Segment+0x140>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	98 ab       	std	Y+48, r25	; 0x30
    2d3a:	8f a7       	std	Y+47, r24	; 0x2f
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <display_4_Digits_7Segment+0x1be>
	else if (__tmp > 65535)
    2d3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2d40:	7a a9       	ldd	r23, Y+50	; 0x32
    2d42:	8b a9       	ldd	r24, Y+51	; 0x33
    2d44:	9c a9       	ldd	r25, Y+52	; 0x34
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <display_4_Digits_7Segment+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	6d a9       	ldd	r22, Y+53	; 0x35
    2d58:	7e a9       	ldd	r23, Y+54	; 0x36
    2d5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2d5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	51 e4       	ldi	r21, 0x41	; 65
    2d66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	98 ab       	std	Y+48, r25	; 0x30
    2d7c:	8f a7       	std	Y+47, r24	; 0x2f
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <display_4_Digits_7Segment+0x1a0>
    2d80:	84 e1       	ldi	r24, 0x14	; 20
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9e a7       	std	Y+46, r25	; 0x2e
    2d86:	8d a7       	std	Y+45, r24	; 0x2d
    2d88:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <display_4_Digits_7Segment+0x18e>
    2d90:	9e a7       	std	Y+46, r25	; 0x2e
    2d92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d96:	98 a9       	ldd	r25, Y+48	; 0x30
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	98 ab       	std	Y+48, r25	; 0x30
    2d9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da0:	98 a9       	ldd	r25, Y+48	; 0x30
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <display_4_Digits_7Segment+0x182>
    2da6:	14 c0       	rjmp	.+40     	; 0x2dd0 <display_4_Digits_7Segment+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	69 a9       	ldd	r22, Y+49	; 0x31
    2daa:	7a a9       	ldd	r23, Y+50	; 0x32
    2dac:	8b a9       	ldd	r24, Y+51	; 0x33
    2dae:	9c a9       	ldd	r25, Y+52	; 0x34
    2db0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	98 ab       	std	Y+48, r25	; 0x30
    2dba:	8f a7       	std	Y+47, r24	; 0x2f
    2dbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2dc0:	9c a7       	std	Y+44, r25	; 0x2c
    2dc2:	8b a7       	std	Y+43, r24	; 0x2b
    2dc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <display_4_Digits_7Segment+0x1ca>
    2dcc:	9c a7       	std	Y+44, r25	; 0x2c
    2dce:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);

	}

	if(number>100)
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ff 96       	adiw	r30, 0x3f	; 63
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	85 36       	cpi	r24, 0x65	; 101
    2dda:	91 05       	cpc	r25, r1
    2ddc:	08 f4       	brcc	.+2      	; 0x2de0 <display_4_Digits_7Segment+0x1e2>
    2dde:	92 c0       	rjmp	.+292    	; 0x2f04 <display_4_Digits_7Segment+0x306>
	{

		PORTC |=(1<<PC5);
    2de0:	a5 e3       	ldi	r26, 0x35	; 53
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e5 e3       	ldi	r30, 0x35	; 53
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	80 62       	ori	r24, 0x20	; 32
    2dec:	8c 93       	st	X, r24
		PORTC &=~(1<<PC4);
    2dee:	a5 e3       	ldi	r26, 0x35	; 53
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e5 e3       	ldi	r30, 0x35	; 53
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	8f 7e       	andi	r24, 0xEF	; 239
    2dfa:	8c 93       	st	X, r24
		PORTC |=(1<<PC3);
    2dfc:	a5 e3       	ldi	r26, 0x35	; 53
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e5 e3       	ldi	r30, 0x35	; 53
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	88 60       	ori	r24, 0x08	; 8
    2e08:	8c 93       	st	X, r24
		PORTC |=(1<<PC2);
    2e0a:	a5 e3       	ldi	r26, 0x35	; 53
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e5 e3       	ldi	r30, 0x35	; 53
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	84 60       	ori	r24, 0x04	; 4
    2e16:	8c 93       	st	X, r24

		PORTB = digit3;
    2e18:	e8 e3       	ldi	r30, 0x38	; 56
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e1e:	80 83       	st	Z, r24
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a0 ea       	ldi	r26, 0xA0	; 160
    2e26:	b0 e4       	ldi	r27, 0x40	; 64
    2e28:	8f a3       	std	Y+39, r24	; 0x27
    2e2a:	98 a7       	std	Y+40, r25	; 0x28
    2e2c:	a9 a7       	std	Y+41, r26	; 0x29
    2e2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e30:	6f a1       	ldd	r22, Y+39	; 0x27
    2e32:	78 a5       	ldd	r23, Y+40	; 0x28
    2e34:	89 a5       	ldd	r24, Y+41	; 0x29
    2e36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	48 e4       	ldi	r20, 0x48	; 72
    2e3e:	53 e4       	ldi	r21, 0x43	; 67
    2e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	8b a3       	std	Y+35, r24	; 0x23
    2e4a:	9c a3       	std	Y+36, r25	; 0x24
    2e4c:	ad a3       	std	Y+37, r26	; 0x25
    2e4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e50:	6b a1       	ldd	r22, Y+35	; 0x23
    2e52:	7c a1       	ldd	r23, Y+36	; 0x24
    2e54:	8d a1       	ldd	r24, Y+37	; 0x25
    2e56:	9e a1       	ldd	r25, Y+38	; 0x26
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e8       	ldi	r20, 0x80	; 128
    2e5e:	5f e3       	ldi	r21, 0x3F	; 63
    2e60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e64:	88 23       	and	r24, r24
    2e66:	2c f4       	brge	.+10     	; 0x2e72 <display_4_Digits_7Segment+0x274>
		__ticks = 1;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	9a a3       	std	Y+34, r25	; 0x22
    2e6e:	89 a3       	std	Y+33, r24	; 0x21
    2e70:	3f c0       	rjmp	.+126    	; 0x2ef0 <display_4_Digits_7Segment+0x2f2>
	else if (__tmp > 65535)
    2e72:	6b a1       	ldd	r22, Y+35	; 0x23
    2e74:	7c a1       	ldd	r23, Y+36	; 0x24
    2e76:	8d a1       	ldd	r24, Y+37	; 0x25
    2e78:	9e a1       	ldd	r25, Y+38	; 0x26
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	3f ef       	ldi	r19, 0xFF	; 255
    2e7e:	4f e7       	ldi	r20, 0x7F	; 127
    2e80:	57 e4       	ldi	r21, 0x47	; 71
    2e82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e86:	18 16       	cp	r1, r24
    2e88:	4c f5       	brge	.+82     	; 0x2edc <display_4_Digits_7Segment+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e2       	ldi	r20, 0x20	; 32
    2e98:	51 e4       	ldi	r21, 0x41	; 65
    2e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	bc 01       	movw	r22, r24
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9a a3       	std	Y+34, r25	; 0x22
    2eb0:	89 a3       	std	Y+33, r24	; 0x21
    2eb2:	0f c0       	rjmp	.+30     	; 0x2ed2 <display_4_Digits_7Segment+0x2d4>
    2eb4:	84 e1       	ldi	r24, 0x14	; 20
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	98 a3       	std	Y+32, r25	; 0x20
    2eba:	8f 8f       	std	Y+31, r24	; 0x1f
    2ebc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ebe:	98 a1       	ldd	r25, Y+32	; 0x20
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <display_4_Digits_7Segment+0x2c2>
    2ec4:	98 a3       	std	Y+32, r25	; 0x20
    2ec6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eca:	9a a1       	ldd	r25, Y+34	; 0x22
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	9a a3       	std	Y+34, r25	; 0x22
    2ed0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	69 f7       	brne	.-38     	; 0x2eb4 <display_4_Digits_7Segment+0x2b6>
    2eda:	14 c0       	rjmp	.+40     	; 0x2f04 <display_4_Digits_7Segment+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2edc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ede:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9a a3       	std	Y+34, r25	; 0x22
    2eee:	89 a3       	std	Y+33, r24	; 0x21
    2ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ef6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2efa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <display_4_Digits_7Segment+0x2fe>
    2f00:	9e 8f       	std	Y+30, r25	; 0x1e
    2f02:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
	}

	if(number>10)
    2f04:	fe 01       	movw	r30, r28
    2f06:	ff 96       	adiw	r30, 0x3f	; 63
    2f08:	80 81       	ld	r24, Z
    2f0a:	91 81       	ldd	r25, Z+1	; 0x01
    2f0c:	8b 30       	cpi	r24, 0x0B	; 11
    2f0e:	91 05       	cpc	r25, r1
    2f10:	08 f4       	brcc	.+2      	; 0x2f14 <display_4_Digits_7Segment+0x316>
    2f12:	92 c0       	rjmp	.+292    	; 0x3038 <display_4_Digits_7Segment+0x43a>
	{

		PORTC |=(1<<PC5);
    2f14:	a5 e3       	ldi	r26, 0x35	; 53
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e5 e3       	ldi	r30, 0x35	; 53
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	80 62       	ori	r24, 0x20	; 32
    2f20:	8c 93       	st	X, r24
		PORTC |=(1<<PC4);
    2f22:	a5 e3       	ldi	r26, 0x35	; 53
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e5 e3       	ldi	r30, 0x35	; 53
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	80 61       	ori	r24, 0x10	; 16
    2f2e:	8c 93       	st	X, r24
		PORTC &=~(1<<PC3);
    2f30:	a5 e3       	ldi	r26, 0x35	; 53
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	e5 e3       	ldi	r30, 0x35	; 53
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	87 7f       	andi	r24, 0xF7	; 247
    2f3c:	8c 93       	st	X, r24
		PORTC |=(1<<PC2);
    2f3e:	a5 e3       	ldi	r26, 0x35	; 53
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e5 e3       	ldi	r30, 0x35	; 53
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	84 60       	ori	r24, 0x04	; 4
    2f4a:	8c 93       	st	X, r24

		PORTB = digit2;
    2f4c:	e8 e3       	ldi	r30, 0x38	; 56
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f52:	80 83       	st	Z, r24
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 ea       	ldi	r26, 0xA0	; 160
    2f5a:	b0 e4       	ldi	r27, 0x40	; 64
    2f5c:	89 8f       	std	Y+25, r24	; 0x19
    2f5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f60:	ab 8f       	std	Y+27, r26	; 0x1b
    2f62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	69 8d       	ldd	r22, Y+25	; 0x19
    2f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	48 e4       	ldi	r20, 0x48	; 72
    2f72:	53 e4       	ldi	r21, 0x43	; 67
    2f74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8d 8b       	std	Y+21, r24	; 0x15
    2f7e:	9e 8b       	std	Y+22, r25	; 0x16
    2f80:	af 8b       	std	Y+23, r26	; 0x17
    2f82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f84:	6d 89       	ldd	r22, Y+21	; 0x15
    2f86:	7e 89       	ldd	r23, Y+22	; 0x16
    2f88:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <display_4_Digits_7Segment+0x3a8>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9c 8b       	std	Y+20, r25	; 0x14
    2fa2:	8b 8b       	std	Y+19, r24	; 0x13
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <display_4_Digits_7Segment+0x426>
	else if (__tmp > 65535)
    2fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2faa:	8f 89       	ldd	r24, Y+23	; 0x17
    2fac:	98 8d       	ldd	r25, Y+24	; 0x18
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <display_4_Digits_7Segment+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9c 8b       	std	Y+20, r25	; 0x14
    2fe4:	8b 8b       	std	Y+19, r24	; 0x13
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <display_4_Digits_7Segment+0x408>
    2fe8:	84 e1       	ldi	r24, 0x14	; 20
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	9a 8b       	std	Y+18, r25	; 0x12
    2fee:	89 8b       	std	Y+17, r24	; 0x11
    2ff0:	89 89       	ldd	r24, Y+17	; 0x11
    2ff2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <display_4_Digits_7Segment+0x3f6>
    2ff8:	9a 8b       	std	Y+18, r25	; 0x12
    2ffa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	9c 8b       	std	Y+20, r25	; 0x14
    3004:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8b 89       	ldd	r24, Y+19	; 0x13
    3008:	9c 89       	ldd	r25, Y+20	; 0x14
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <display_4_Digits_7Segment+0x3ea>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <display_4_Digits_7Segment+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	6d 89       	ldd	r22, Y+21	; 0x15
    3012:	7e 89       	ldd	r23, Y+22	; 0x16
    3014:	8f 89       	ldd	r24, Y+23	; 0x17
    3016:	98 8d       	ldd	r25, Y+24	; 0x18
    3018:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9c 8b       	std	Y+20, r25	; 0x14
    3022:	8b 8b       	std	Y+19, r24	; 0x13
    3024:	8b 89       	ldd	r24, Y+19	; 0x13
    3026:	9c 89       	ldd	r25, Y+20	; 0x14
    3028:	98 8b       	std	Y+16, r25	; 0x10
    302a:	8f 87       	std	Y+15, r24	; 0x0f
    302c:	8f 85       	ldd	r24, Y+15	; 0x0f
    302e:	98 89       	ldd	r25, Y+16	; 0x10
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <display_4_Digits_7Segment+0x432>
    3034:	98 8b       	std	Y+16, r25	; 0x10
    3036:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
	}


	PORTC |=(1<<PC5);
    3038:	a5 e3       	ldi	r26, 0x35	; 53
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	e5 e3       	ldi	r30, 0x35	; 53
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	80 62       	ori	r24, 0x20	; 32
    3044:	8c 93       	st	X, r24
	PORTC |=(1<<PC4);
    3046:	a5 e3       	ldi	r26, 0x35	; 53
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	e5 e3       	ldi	r30, 0x35	; 53
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	80 61       	ori	r24, 0x10	; 16
    3052:	8c 93       	st	X, r24
	PORTC |=(1<<PC3);
    3054:	a5 e3       	ldi	r26, 0x35	; 53
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e5 e3       	ldi	r30, 0x35	; 53
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	88 60       	ori	r24, 0x08	; 8
    3060:	8c 93       	st	X, r24
	PORTC &=~(1<<PC2);
    3062:	a5 e3       	ldi	r26, 0x35	; 53
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e5 e3       	ldi	r30, 0x35	; 53
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	8b 7f       	andi	r24, 0xFB	; 251
    306e:	8c 93       	st	X, r24
	PORTB = digit1;
    3070:	e8 e3       	ldi	r30, 0x38	; 56
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	8e ad       	ldd	r24, Y+62	; 0x3e
    3076:	80 83       	st	Z, r24
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a0 ea       	ldi	r26, 0xA0	; 160
    307e:	b0 e4       	ldi	r27, 0x40	; 64
    3080:	8b 87       	std	Y+11, r24	; 0x0b
    3082:	9c 87       	std	Y+12, r25	; 0x0c
    3084:	ad 87       	std	Y+13, r26	; 0x0d
    3086:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	6b 85       	ldd	r22, Y+11	; 0x0b
    308a:	7c 85       	ldd	r23, Y+12	; 0x0c
    308c:	8d 85       	ldd	r24, Y+13	; 0x0d
    308e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	48 e4       	ldi	r20, 0x48	; 72
    3096:	53 e4       	ldi	r21, 0x43	; 67
    3098:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	8f 83       	std	Y+7, r24	; 0x07
    30a2:	98 87       	std	Y+8, r25	; 0x08
    30a4:	a9 87       	std	Y+9, r26	; 0x09
    30a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    30bc:	88 23       	and	r24, r24
    30be:	2c f4       	brge	.+10     	; 0x30ca <display_4_Digits_7Segment+0x4cc>
		__ticks = 1;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
    30c8:	3f c0       	rjmp	.+126    	; 0x3148 <display_4_Digits_7Segment+0x54a>
	else if (__tmp > 65535)
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	4c f5       	brge	.+82     	; 0x3134 <display_4_Digits_7Segment+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9e 83       	std	Y+6, r25	; 0x06
    3108:	8d 83       	std	Y+5, r24	; 0x05
    310a:	0f c0       	rjmp	.+30     	; 0x312a <display_4_Digits_7Segment+0x52c>
    310c:	84 e1       	ldi	r24, 0x14	; 20
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9c 83       	std	Y+4, r25	; 0x04
    3112:	8b 83       	std	Y+3, r24	; 0x03
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	9c 81       	ldd	r25, Y+4	; 0x04
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <display_4_Digits_7Segment+0x51a>
    311c:	9c 83       	std	Y+4, r25	; 0x04
    311e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	9e 81       	ldd	r25, Y+6	; 0x06
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <display_4_Digits_7Segment+0x50e>
    3132:	14 c0       	rjmp	.+40     	; 0x315c <display_4_Digits_7Segment+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	6f 81       	ldd	r22, Y+7	; 0x07
    3136:	78 85       	ldd	r23, Y+8	; 0x08
    3138:	89 85       	ldd	r24, Y+9	; 0x09
    313a:	9a 85       	ldd	r25, Y+10	; 0x0a
    313c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	9a 83       	std	Y+2, r25	; 0x02
    314e:	89 83       	std	Y+1, r24	; 0x01
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <display_4_Digits_7Segment+0x556>
    3158:	9a 83       	std	Y+2, r25	; 0x02
    315a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);


}
    315c:	c0 5c       	subi	r28, 0xC0	; 192
    315e:	df 4f       	sbci	r29, 0xFF	; 255
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <stop_watch>:
void stop_watch()
{
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	6d 97       	sbiw	r28, 0x1d	; 29
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
	unsigned char i=0;
    3184:	1d 8e       	std	Y+29, r1	; 0x1d
         	PORTC &=~(1<<PC5);
    3186:	a5 e3       	ldi	r26, 0x35	; 53
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e5 e3       	ldi	r30, 0x35	; 53
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	8f 7d       	andi	r24, 0xDF	; 223
    3192:	8c 93       	st	X, r24
			PORTC |=(1<<PC4);
    3194:	a5 e3       	ldi	r26, 0x35	; 53
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	e5 e3       	ldi	r30, 0x35	; 53
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	80 61       	ori	r24, 0x10	; 16
    31a0:	8c 93       	st	X, r24
			PORTC |=(1<<PC3);
    31a2:	a5 e3       	ldi	r26, 0x35	; 53
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e5 e3       	ldi	r30, 0x35	; 53
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	88 60       	ori	r24, 0x08	; 8
    31ae:	8c 93       	st	X, r24
			PORTC |=(1<<PC2);
    31b0:	a5 e3       	ldi	r26, 0x35	; 53
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e5 e3       	ldi	r30, 0x35	; 53
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	84 60       	ori	r24, 0x04	; 4
    31bc:	8c 93       	st	X, r24
			PORTB=0;
    31be:	e8 e3       	ldi	r30, 0x38	; 56
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	10 82       	st	Z, r1
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	a0 ea       	ldi	r26, 0xA0	; 160
    31ca:	b0 e4       	ldi	r27, 0x40	; 64
    31cc:	89 8f       	std	Y+25, r24	; 0x19
    31ce:	9a 8f       	std	Y+26, r25	; 0x1a
    31d0:	ab 8f       	std	Y+27, r26	; 0x1b
    31d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d4:	69 8d       	ldd	r22, Y+25	; 0x19
    31d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	48 e4       	ldi	r20, 0x48	; 72
    31e2:	53 e4       	ldi	r21, 0x43	; 67
    31e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8d 8b       	std	Y+21, r24	; 0x15
    31ee:	9e 8b       	std	Y+22, r25	; 0x16
    31f0:	af 8b       	std	Y+23, r26	; 0x17
    31f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31f4:	6d 89       	ldd	r22, Y+21	; 0x15
    31f6:	7e 89       	ldd	r23, Y+22	; 0x16
    31f8:	8f 89       	ldd	r24, Y+23	; 0x17
    31fa:	98 8d       	ldd	r25, Y+24	; 0x18
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	2c f4       	brge	.+10     	; 0x3216 <stop_watch+0xa6>
		__ticks = 1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	8b 8b       	std	Y+19, r24	; 0x13
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <stop_watch+0x124>
	else if (__tmp > 65535)
    3216:	6d 89       	ldd	r22, Y+21	; 0x15
    3218:	7e 89       	ldd	r23, Y+22	; 0x16
    321a:	8f 89       	ldd	r24, Y+23	; 0x17
    321c:	98 8d       	ldd	r25, Y+24	; 0x18
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	4c f5       	brge	.+82     	; 0x3280 <stop_watch+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322e:	69 8d       	ldd	r22, Y+25	; 0x19
    3230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <stop_watch+0x106>
    3258:	84 e1       	ldi	r24, 0x14	; 20
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	9a 8b       	std	Y+18, r25	; 0x12
    325e:	89 8b       	std	Y+17, r24	; 0x11
    3260:	89 89       	ldd	r24, Y+17	; 0x11
    3262:	9a 89       	ldd	r25, Y+18	; 0x12
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <stop_watch+0xf4>
    3268:	9a 8b       	std	Y+18, r25	; 0x12
    326a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	69 f7       	brne	.-38     	; 0x3258 <stop_watch+0xe8>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <stop_watch+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3280:	6d 89       	ldd	r22, Y+21	; 0x15
    3282:	7e 89       	ldd	r23, Y+22	; 0x16
    3284:	8f 89       	ldd	r24, Y+23	; 0x17
    3286:	98 8d       	ldd	r25, Y+24	; 0x18
    3288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	8b 89       	ldd	r24, Y+19	; 0x13
    3296:	9c 89       	ldd	r25, Y+20	; 0x14
    3298:	98 8b       	std	Y+16, r25	; 0x10
    329a:	8f 87       	std	Y+15, r24	; 0x0f
    329c:	8f 85       	ldd	r24, Y+15	; 0x0f
    329e:	98 89       	ldd	r25, Y+16	; 0x10
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <stop_watch+0x130>
    32a4:	98 8b       	std	Y+16, r25	; 0x10
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);

		         	PORTC |=(1<<PC5);
    32a8:	a5 e3       	ldi	r26, 0x35	; 53
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e5 e3       	ldi	r30, 0x35	; 53
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	80 62       	ori	r24, 0x20	; 32
    32b4:	8c 93       	st	X, r24
					PORTC &=~(1<<PC4);
    32b6:	a5 e3       	ldi	r26, 0x35	; 53
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	e5 e3       	ldi	r30, 0x35	; 53
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 81       	ld	r24, Z
    32c0:	8f 7e       	andi	r24, 0xEF	; 239
    32c2:	8c 93       	st	X, r24
					PORTC |=(1<<PC3);
    32c4:	a5 e3       	ldi	r26, 0x35	; 53
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e5 e3       	ldi	r30, 0x35	; 53
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	88 60       	ori	r24, 0x08	; 8
    32d0:	8c 93       	st	X, r24
					PORTC |=(1<<PC2);
    32d2:	a5 e3       	ldi	r26, 0x35	; 53
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e5 e3       	ldi	r30, 0x35	; 53
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	84 60       	ori	r24, 0x04	; 4
    32de:	8c 93       	st	X, r24
					while(1)
					{
					PORTB=i++;
    32e0:	e8 e3       	ldi	r30, 0x38	; 56
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e6:	80 83       	st	Z, r24
    32e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ea:	8f 5f       	subi	r24, 0xFF	; 255
    32ec:	8d 8f       	std	Y+29, r24	; 0x1d
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a0 ea       	ldi	r26, 0xA0	; 160
    32f4:	b0 e4       	ldi	r27, 0x40	; 64
    32f6:	8b 87       	std	Y+11, r24	; 0x0b
    32f8:	9c 87       	std	Y+12, r25	; 0x0c
    32fa:	ad 87       	std	Y+13, r26	; 0x0d
    32fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3300:	7c 85       	ldd	r23, Y+12	; 0x0c
    3302:	8d 85       	ldd	r24, Y+13	; 0x0d
    3304:	9e 85       	ldd	r25, Y+14	; 0x0e
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	48 e4       	ldi	r20, 0x48	; 72
    330c:	53 e4       	ldi	r21, 0x43	; 67
    330e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	8f 83       	std	Y+7, r24	; 0x07
    3318:	98 87       	std	Y+8, r25	; 0x08
    331a:	a9 87       	std	Y+9, r26	; 0x09
    331c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    331e:	6f 81       	ldd	r22, Y+7	; 0x07
    3320:	78 85       	ldd	r23, Y+8	; 0x08
    3322:	89 85       	ldd	r24, Y+9	; 0x09
    3324:	9a 85       	ldd	r25, Y+10	; 0x0a
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	2c f4       	brge	.+10     	; 0x3340 <stop_watch+0x1d0>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9e 83       	std	Y+6, r25	; 0x06
    333c:	8d 83       	std	Y+5, r24	; 0x05
    333e:	3f c0       	rjmp	.+126    	; 0x33be <stop_watch+0x24e>
	else if (__tmp > 65535)
    3340:	6f 81       	ldd	r22, Y+7	; 0x07
    3342:	78 85       	ldd	r23, Y+8	; 0x08
    3344:	89 85       	ldd	r24, Y+9	; 0x09
    3346:	9a 85       	ldd	r25, Y+10	; 0x0a
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	3f ef       	ldi	r19, 0xFF	; 255
    334c:	4f e7       	ldi	r20, 0x7F	; 127
    334e:	57 e4       	ldi	r21, 0x47	; 71
    3350:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3354:	18 16       	cp	r1, r24
    3356:	4c f5       	brge	.+82     	; 0x33aa <stop_watch+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3358:	6b 85       	ldd	r22, Y+11	; 0x0b
    335a:	7c 85       	ldd	r23, Y+12	; 0x0c
    335c:	8d 85       	ldd	r24, Y+13	; 0x0d
    335e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e2       	ldi	r20, 0x20	; 32
    3366:	51 e4       	ldi	r21, 0x41	; 65
    3368:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	0f c0       	rjmp	.+30     	; 0x33a0 <stop_watch+0x230>
    3382:	84 e1       	ldi	r24, 0x14	; 20
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9c 83       	std	Y+4, r25	; 0x04
    3388:	8b 83       	std	Y+3, r24	; 0x03
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	9c 81       	ldd	r25, Y+4	; 0x04
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <stop_watch+0x21e>
    3392:	9c 83       	std	Y+4, r25	; 0x04
    3394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	8d 81       	ldd	r24, Y+5	; 0x05
    3398:	9e 81       	ldd	r25, Y+6	; 0x06
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a0:	8d 81       	ldd	r24, Y+5	; 0x05
    33a2:	9e 81       	ldd	r25, Y+6	; 0x06
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	69 f7       	brne	.-38     	; 0x3382 <stop_watch+0x212>
    33a8:	14 c0       	rjmp	.+40     	; 0x33d2 <stop_watch+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9e 83       	std	Y+6, r25	; 0x06
    33bc:	8d 83       	std	Y+5, r24	; 0x05
    33be:	8d 81       	ldd	r24, Y+5	; 0x05
    33c0:	9e 81       	ldd	r25, Y+6	; 0x06
    33c2:	9a 83       	std	Y+2, r25	; 0x02
    33c4:	89 83       	std	Y+1, r24	; 0x01
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <stop_watch+0x25a>
    33ce:	9a 83       	std	Y+2, r25	; 0x02
    33d0:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(5);
					if(i>=10)
    33d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33d4:	8a 30       	cpi	r24, 0x0A	; 10
    33d6:	08 f4       	brcc	.+2      	; 0x33da <stop_watch+0x26a>
    33d8:	83 cf       	rjmp	.-250    	; 0x32e0 <stop_watch+0x170>
					{
						PORTC |=(1<<PC5);
    33da:	a5 e3       	ldi	r26, 0x35	; 53
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e5 e3       	ldi	r30, 0x35	; 53
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	80 62       	ori	r24, 0x20	; 32
    33e6:	8c 93       	st	X, r24
						PORTC |=(1<<PC4);
    33e8:	a5 e3       	ldi	r26, 0x35	; 53
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e5 e3       	ldi	r30, 0x35	; 53
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	80 61       	ori	r24, 0x10	; 16
    33f4:	8c 93       	st	X, r24
						PORTC &=~(1<<PC3);
    33f6:	a5 e3       	ldi	r26, 0x35	; 53
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e5 e3       	ldi	r30, 0x35	; 53
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	87 7f       	andi	r24, 0xF7	; 247
    3402:	8c 93       	st	X, r24
						PORTC |=(1<<PC2);
    3404:	a5 e3       	ldi	r26, 0x35	; 53
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	e5 e3       	ldi	r30, 0x35	; 53
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	84 60       	ori	r24, 0x04	; 4
    3410:	8c 93       	st	X, r24
						PORTB=i++;
    3412:	e8 e3       	ldi	r30, 0x38	; 56
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3418:	80 83       	st	Z, r24
    341a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    341c:	8f 5f       	subi	r24, 0xFF	; 255
    341e:	8d 8f       	std	Y+29, r24	; 0x1d
    3420:	5f cf       	rjmp	.-322    	; 0x32e0 <stop_watch+0x170>

00003422 <init_uart>:
#include"uart.h"



void init_uart()
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	00 d0       	rcall	.+0      	; 0x3428 <init_uart+0x6>
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
	unsigned int rate=0;
    342c:	1a 82       	std	Y+2, r1	; 0x02
    342e:	19 82       	std	Y+1, r1	; 0x01
	    UCSRB = (1 << RXEN) | (1 << TXEN);
    3430:	ea e2       	ldi	r30, 0x2A	; 42
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	88 e1       	ldi	r24, 0x18	; 24
    3436:	80 83       	st	Z, r24
		UCSRC = (1 << URSEL) | (3 << UCSZ0);
    3438:	e0 e4       	ldi	r30, 0x40	; 64
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	86 e8       	ldi	r24, 0x86	; 134
    343e:	80 83       	st	Z, r24
		rate= FOSC/16/BAUD-1;
    3440:	83 e3       	ldi	r24, 0x33	; 51
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9a 83       	std	Y+2, r25	; 0x02
    3446:	89 83       	std	Y+1, r24	; 0x01
		UBRRL=rate;
    3448:	e9 e2       	ldi	r30, 0x29	; 41
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	80 83       	st	Z, r24
		UBRRH=(rate<<8);
    3450:	e0 e4       	ldi	r30, 0x40	; 64
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	10 82       	st	Z, r1


}
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <ready_to_send>:
void ready_to_send()
{
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	2e 97       	sbiw	r28, 0x0e	; 14
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
	while (!( UCSRA & (1<<UDRE))) ;
    3474:	eb e2       	ldi	r30, 0x2B	; 43
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	88 2f       	mov	r24, r24
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	80 72       	andi	r24, 0x20	; 32
    3480:	90 70       	andi	r25, 0x00	; 0
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	b9 f3       	breq	.-18     	; 0x3474 <ready_to_send+0x14>
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e8       	ldi	r25, 0x80	; 128
    348a:	ab e3       	ldi	r26, 0x3B	; 59
    348c:	b5 e4       	ldi	r27, 0x45	; 69
    348e:	8b 87       	std	Y+11, r24	; 0x0b
    3490:	9c 87       	std	Y+12, r25	; 0x0c
    3492:	ad 87       	std	Y+13, r26	; 0x0d
    3494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3496:	6b 85       	ldd	r22, Y+11	; 0x0b
    3498:	7c 85       	ldd	r23, Y+12	; 0x0c
    349a:	8d 85       	ldd	r24, Y+13	; 0x0d
    349c:	9e 85       	ldd	r25, Y+14	; 0x0e
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	48 e4       	ldi	r20, 0x48	; 72
    34a4:	53 e4       	ldi	r21, 0x43	; 67
    34a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	8f 83       	std	Y+7, r24	; 0x07
    34b0:	98 87       	std	Y+8, r25	; 0x08
    34b2:	a9 87       	std	Y+9, r26	; 0x09
    34b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b6:	6f 81       	ldd	r22, Y+7	; 0x07
    34b8:	78 85       	ldd	r23, Y+8	; 0x08
    34ba:	89 85       	ldd	r24, Y+9	; 0x09
    34bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e8       	ldi	r20, 0x80	; 128
    34c4:	5f e3       	ldi	r21, 0x3F	; 63
    34c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34ca:	88 23       	and	r24, r24
    34cc:	2c f4       	brge	.+10     	; 0x34d8 <ready_to_send+0x78>
		__ticks = 1;
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	9e 83       	std	Y+6, r25	; 0x06
    34d4:	8d 83       	std	Y+5, r24	; 0x05
    34d6:	3f c0       	rjmp	.+126    	; 0x3556 <ready_to_send+0xf6>
	else if (__tmp > 65535)
    34d8:	6f 81       	ldd	r22, Y+7	; 0x07
    34da:	78 85       	ldd	r23, Y+8	; 0x08
    34dc:	89 85       	ldd	r24, Y+9	; 0x09
    34de:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	3f ef       	ldi	r19, 0xFF	; 255
    34e4:	4f e7       	ldi	r20, 0x7F	; 127
    34e6:	57 e4       	ldi	r21, 0x47	; 71
    34e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34ec:	18 16       	cp	r1, r24
    34ee:	4c f5       	brge	.+82     	; 0x3542 <ready_to_send+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 e2       	ldi	r20, 0x20	; 32
    34fe:	51 e4       	ldi	r21, 0x41	; 65
    3500:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	bc 01       	movw	r22, r24
    350a:	cd 01       	movw	r24, r26
    350c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	9e 83       	std	Y+6, r25	; 0x06
    3516:	8d 83       	std	Y+5, r24	; 0x05
    3518:	0f c0       	rjmp	.+30     	; 0x3538 <ready_to_send+0xd8>
    351a:	84 e1       	ldi	r24, 0x14	; 20
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	9c 83       	std	Y+4, r25	; 0x04
    3520:	8b 83       	std	Y+3, r24	; 0x03
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	9c 81       	ldd	r25, Y+4	; 0x04
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <ready_to_send+0xc6>
    352a:	9c 83       	std	Y+4, r25	; 0x04
    352c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	9e 83       	std	Y+6, r25	; 0x06
    3536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3538:	8d 81       	ldd	r24, Y+5	; 0x05
    353a:	9e 81       	ldd	r25, Y+6	; 0x06
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	69 f7       	brne	.-38     	; 0x351a <ready_to_send+0xba>
    3540:	14 c0       	rjmp	.+40     	; 0x356a <ready_to_send+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3542:	6f 81       	ldd	r22, Y+7	; 0x07
    3544:	78 85       	ldd	r23, Y+8	; 0x08
    3546:	89 85       	ldd	r24, Y+9	; 0x09
    3548:	9a 85       	ldd	r25, Y+10	; 0x0a
    354a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	9e 83       	std	Y+6, r25	; 0x06
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	9e 81       	ldd	r25, Y+6	; 0x06
    355a:	9a 83       	std	Y+2, r25	; 0x02
    355c:	89 83       	std	Y+1, r24	; 0x01
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	9a 81       	ldd	r25, Y+2	; 0x02
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <ready_to_send+0x102>
    3566:	9a 83       	std	Y+2, r25	; 0x02
    3568:	89 83       	std	Y+1, r24	; 0x01
	//LCD_go_to(1,1);
//	LCD_Send_string(" uart is ready ");
	_delay_ms(3000);
	clear_lcd ();
    356a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <clear_lcd>


}
    356e:	2e 96       	adiw	r28, 0x0e	; 14
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <readt_to_receive>:
void readt_to_receive()
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
    3588:	2e 97       	sbiw	r28, 0x0e	; 14
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
	while (!(UCSRA & (1<<RXC)));
    3594:	eb e2       	ldi	r30, 0x2B	; 43
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	88 23       	and	r24, r24
    359c:	dc f7       	brge	.-10     	; 0x3594 <readt_to_receive+0x14>
	LCD_go_to(1,1);
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	61 e0       	ldi	r22, 0x01	; 1
    35a4:	70 e0       	ldi	r23, 0x00	; 0
    35a6:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_go_to>
	LCD_Send_string(" Receiving complete ! ");
    35aa:	8e ea       	ldi	r24, 0xAE	; 174
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 42 13 	call	0x2684	; 0x2684 <LCD_Send_string>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e8       	ldi	r25, 0x80	; 128
    35b6:	ab e3       	ldi	r26, 0x3B	; 59
    35b8:	b5 e4       	ldi	r27, 0x45	; 69
    35ba:	8b 87       	std	Y+11, r24	; 0x0b
    35bc:	9c 87       	std	Y+12, r25	; 0x0c
    35be:	ad 87       	std	Y+13, r26	; 0x0d
    35c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	48 e4       	ldi	r20, 0x48	; 72
    35d0:	53 e4       	ldi	r21, 0x43	; 67
    35d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	8f 83       	std	Y+7, r24	; 0x07
    35dc:	98 87       	std	Y+8, r25	; 0x08
    35de:	a9 87       	std	Y+9, r26	; 0x09
    35e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e8       	ldi	r20, 0x80	; 128
    35f0:	5f e3       	ldi	r21, 0x3F	; 63
    35f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    35f6:	88 23       	and	r24, r24
    35f8:	2c f4       	brge	.+10     	; 0x3604 <readt_to_receive+0x84>
		__ticks = 1;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	3f c0       	rjmp	.+126    	; 0x3682 <readt_to_receive+0x102>
	else if (__tmp > 65535)
    3604:	6f 81       	ldd	r22, Y+7	; 0x07
    3606:	78 85       	ldd	r23, Y+8	; 0x08
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	3f ef       	ldi	r19, 0xFF	; 255
    3610:	4f e7       	ldi	r20, 0x7F	; 127
    3612:	57 e4       	ldi	r21, 0x47	; 71
    3614:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3618:	18 16       	cp	r1, r24
    361a:	4c f5       	brge	.+82     	; 0x366e <readt_to_receive+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361c:	6b 85       	ldd	r22, Y+11	; 0x0b
    361e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3620:	8d 85       	ldd	r24, Y+13	; 0x0d
    3622:	9e 85       	ldd	r25, Y+14	; 0x0e
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e2       	ldi	r20, 0x20	; 32
    362a:	51 e4       	ldi	r21, 0x41	; 65
    362c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	bc 01       	movw	r22, r24
    3636:	cd 01       	movw	r24, r26
    3638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	0f c0       	rjmp	.+30     	; 0x3664 <readt_to_receive+0xe4>
    3646:	84 e1       	ldi	r24, 0x14	; 20
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9c 83       	std	Y+4, r25	; 0x04
    364c:	8b 83       	std	Y+3, r24	; 0x03
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	9c 81       	ldd	r25, Y+4	; 0x04
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <readt_to_receive+0xd2>
    3656:	9c 83       	std	Y+4, r25	; 0x04
    3658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	69 f7       	brne	.-38     	; 0x3646 <readt_to_receive+0xc6>
    366c:	14 c0       	rjmp	.+40     	; 0x3696 <readt_to_receive+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	9e 81       	ldd	r25, Y+6	; 0x06
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <readt_to_receive+0x10e>
    3692:	9a 83       	std	Y+2, r25	; 0x02
    3694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
		clear_lcd ();
    3696:	0e 94 f5 13 	call	0x27ea	; 0x27ea <clear_lcd>

}
    369a:	2e 96       	adiw	r28, 0x0e	; 14
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	cf 91       	pop	r28
    36a8:	df 91       	pop	r29
    36aa:	08 95       	ret

000036ac <send_one_letter>:
void send_one_letter(unsigned char letter)
{
    36ac:	df 93       	push	r29
    36ae:	cf 93       	push	r28
    36b0:	0f 92       	push	r0
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
    36b6:	89 83       	std	Y+1, r24	; 0x01
	 ready_to_send();
    36b8:	0e 94 30 1a 	call	0x3460	; 0x3460 <ready_to_send>
	 UDR=letter;
    36bc:	ec e2       	ldi	r30, 0x2C	; 44
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	80 83       	st	Z, r24

}
    36c4:	0f 90       	pop	r0
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <receive_the_letter>:
char receive_the_letter()
{
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
	readt_to_receive();
    36d4:	0e 94 c0 1a 	call	0x3580	; 0x3580 <readt_to_receive>
	return UDR ;
    36d8:	ec e2       	ldi	r30, 0x2C	; 44
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
}
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <UART_SEND_string>:
void UART_SEND_string(char *array)
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <UART_SEND_string+0x6>
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	9a 83       	std	Y+2, r25	; 0x02
    36f0:	89 83       	std	Y+1, r24	; 0x01
    36f2:	0b c0       	rjmp	.+22     	; 0x370a <UART_SEND_string+0x26>

	while(*array !='\0')
	{

		send_one_letter(*array++);
    36f4:	e9 81       	ldd	r30, Y+1	; 0x01
    36f6:	fa 81       	ldd	r31, Y+2	; 0x02
    36f8:	20 81       	ld	r18, Z
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	01 96       	adiw	r24, 0x01	; 1
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	82 2f       	mov	r24, r18
    3706:	0e 94 56 1b 	call	0x36ac	; 0x36ac <send_one_letter>
	return UDR ;
}
void UART_SEND_string(char *array)
{

	while(*array !='\0')
    370a:	e9 81       	ldd	r30, Y+1	; 0x01
    370c:	fa 81       	ldd	r31, Y+2	; 0x02
    370e:	80 81       	ld	r24, Z
    3710:	88 23       	and	r24, r24
    3712:	81 f7       	brne	.-32     	; 0x36f4 <UART_SEND_string+0x10>

		send_one_letter(*array++);

	}

}
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <counter_7_segment>:
void counter_7_segment()
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	c0 54       	subi	r28, 0x40	; 64
    3728:	d0 40       	sbci	r29, 0x00	; 0
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	0f be       	out	0x3f, r0	; 63
    3732:	cd bf       	out	0x3d, r28	; 61
	unsigned int number=0;
    3734:	fe 01       	movw	r30, r28
    3736:	ff 96       	adiw	r30, 0x3f	; 63
    3738:	11 82       	std	Z+1, r1	; 0x01
    373a:	10 82       	st	Z, r1
	unsigned char digit1=0,digit2=0,digit3=0,digit4=0;
    373c:	1e ae       	std	Y+62, r1	; 0x3e
    373e:	1d ae       	std	Y+61, r1	; 0x3d
    3740:	1c ae       	std	Y+60, r1	; 0x3c
    3742:	1b ae       	std	Y+59, r1	; 0x3b
		unsigned int temp=0;
    3744:	1a ae       	std	Y+58, r1	; 0x3a
    3746:	19 ae       	std	Y+57, r1	; 0x39
    3748:	9a c2       	rjmp	.+1332   	; 0x3c7e <counter_7_segment+0x560>
while(number<=1000)
{

		digit4=number/1000;
    374a:	fe 01       	movw	r30, r28
    374c:	ff 96       	adiw	r30, 0x3f	; 63
    374e:	80 81       	ld	r24, Z
    3750:	91 81       	ldd	r25, Z+1	; 0x01
    3752:	28 ee       	ldi	r18, 0xE8	; 232
    3754:	33 e0       	ldi	r19, 0x03	; 3
    3756:	b9 01       	movw	r22, r18
    3758:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    375c:	cb 01       	movw	r24, r22
    375e:	8b af       	std	Y+59, r24	; 0x3b
		temp=number%1000;
    3760:	fe 01       	movw	r30, r28
    3762:	ff 96       	adiw	r30, 0x3f	; 63
    3764:	80 81       	ld	r24, Z
    3766:	91 81       	ldd	r25, Z+1	; 0x01
    3768:	28 ee       	ldi	r18, 0xE8	; 232
    376a:	33 e0       	ldi	r19, 0x03	; 3
    376c:	b9 01       	movw	r22, r18
    376e:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    3772:	9a af       	std	Y+58, r25	; 0x3a
    3774:	89 af       	std	Y+57, r24	; 0x39

		digit3=temp/100;
    3776:	89 ad       	ldd	r24, Y+57	; 0x39
    3778:	9a ad       	ldd	r25, Y+58	; 0x3a
    377a:	24 e6       	ldi	r18, 0x64	; 100
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	b9 01       	movw	r22, r18
    3780:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    3784:	cb 01       	movw	r24, r22
    3786:	8c af       	std	Y+60, r24	; 0x3c
		temp=temp%100;
    3788:	89 ad       	ldd	r24, Y+57	; 0x39
    378a:	9a ad       	ldd	r25, Y+58	; 0x3a
    378c:	24 e6       	ldi	r18, 0x64	; 100
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	b9 01       	movw	r22, r18
    3792:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    3796:	9a af       	std	Y+58, r25	; 0x3a
    3798:	89 af       	std	Y+57, r24	; 0x39

		digit2=temp/10;
    379a:	89 ad       	ldd	r24, Y+57	; 0x39
    379c:	9a ad       	ldd	r25, Y+58	; 0x3a
    379e:	2a e0       	ldi	r18, 0x0A	; 10
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	b9 01       	movw	r22, r18
    37a4:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    37a8:	cb 01       	movw	r24, r22
    37aa:	8d af       	std	Y+61, r24	; 0x3d

		digit1=temp%10;
    37ac:	89 ad       	ldd	r24, Y+57	; 0x39
    37ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    37b0:	2a e0       	ldi	r18, 0x0A	; 10
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	b9 01       	movw	r22, r18
    37b6:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodhi4>
    37ba:	8e af       	std	Y+62, r24	; 0x3e


		if(number>1000)
    37bc:	fe 01       	movw	r30, r28
    37be:	ff 96       	adiw	r30, 0x3f	; 63
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	23 e0       	ldi	r18, 0x03	; 3
    37c6:	89 3e       	cpi	r24, 0xE9	; 233
    37c8:	92 07       	cpc	r25, r18
    37ca:	08 f4       	brcc	.+2      	; 0x37ce <counter_7_segment+0xb0>
    37cc:	92 c0       	rjmp	.+292    	; 0x38f2 <counter_7_segment+0x1d4>
		{

			PORTC &=~(1<<PC5);
    37ce:	a5 e3       	ldi	r26, 0x35	; 53
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	e5 e3       	ldi	r30, 0x35	; 53
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	8f 7d       	andi	r24, 0xDF	; 223
    37da:	8c 93       	st	X, r24
			PORTC |=(1<<PC4);
    37dc:	a5 e3       	ldi	r26, 0x35	; 53
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	e5 e3       	ldi	r30, 0x35	; 53
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	80 61       	ori	r24, 0x10	; 16
    37e8:	8c 93       	st	X, r24
			PORTC |=(1<<PC3);
    37ea:	a5 e3       	ldi	r26, 0x35	; 53
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	e5 e3       	ldi	r30, 0x35	; 53
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	80 81       	ld	r24, Z
    37f4:	88 60       	ori	r24, 0x08	; 8
    37f6:	8c 93       	st	X, r24
			PORTC |=(1<<PC2);
    37f8:	a5 e3       	ldi	r26, 0x35	; 53
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	e5 e3       	ldi	r30, 0x35	; 53
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	84 60       	ori	r24, 0x04	; 4
    3804:	8c 93       	st	X, r24
			PORTB = digit4;
    3806:	e8 e3       	ldi	r30, 0x38	; 56
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	8b ad       	ldd	r24, Y+59	; 0x3b
    380c:	80 83       	st	Z, r24
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	a0 ea       	ldi	r26, 0xA0	; 160
    3814:	b0 e4       	ldi	r27, 0x40	; 64
    3816:	8d ab       	std	Y+53, r24	; 0x35
    3818:	9e ab       	std	Y+54, r25	; 0x36
    381a:	af ab       	std	Y+55, r26	; 0x37
    381c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381e:	6d a9       	ldd	r22, Y+53	; 0x35
    3820:	7e a9       	ldd	r23, Y+54	; 0x36
    3822:	8f a9       	ldd	r24, Y+55	; 0x37
    3824:	98 ad       	ldd	r25, Y+56	; 0x38
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	48 e4       	ldi	r20, 0x48	; 72
    382c:	53 e4       	ldi	r21, 0x43	; 67
    382e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	89 ab       	std	Y+49, r24	; 0x31
    3838:	9a ab       	std	Y+50, r25	; 0x32
    383a:	ab ab       	std	Y+51, r26	; 0x33
    383c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    383e:	69 a9       	ldd	r22, Y+49	; 0x31
    3840:	7a a9       	ldd	r23, Y+50	; 0x32
    3842:	8b a9       	ldd	r24, Y+51	; 0x33
    3844:	9c a9       	ldd	r25, Y+52	; 0x34
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e8       	ldi	r20, 0x80	; 128
    384c:	5f e3       	ldi	r21, 0x3F	; 63
    384e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3852:	88 23       	and	r24, r24
    3854:	2c f4       	brge	.+10     	; 0x3860 <counter_7_segment+0x142>
		__ticks = 1;
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	98 ab       	std	Y+48, r25	; 0x30
    385c:	8f a7       	std	Y+47, r24	; 0x2f
    385e:	3f c0       	rjmp	.+126    	; 0x38de <counter_7_segment+0x1c0>
	else if (__tmp > 65535)
    3860:	69 a9       	ldd	r22, Y+49	; 0x31
    3862:	7a a9       	ldd	r23, Y+50	; 0x32
    3864:	8b a9       	ldd	r24, Y+51	; 0x33
    3866:	9c a9       	ldd	r25, Y+52	; 0x34
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	3f ef       	ldi	r19, 0xFF	; 255
    386c:	4f e7       	ldi	r20, 0x7F	; 127
    386e:	57 e4       	ldi	r21, 0x47	; 71
    3870:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3874:	18 16       	cp	r1, r24
    3876:	4c f5       	brge	.+82     	; 0x38ca <counter_7_segment+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3878:	6d a9       	ldd	r22, Y+53	; 0x35
    387a:	7e a9       	ldd	r23, Y+54	; 0x36
    387c:	8f a9       	ldd	r24, Y+55	; 0x37
    387e:	98 ad       	ldd	r25, Y+56	; 0x38
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e2       	ldi	r20, 0x20	; 32
    3886:	51 e4       	ldi	r21, 0x41	; 65
    3888:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	98 ab       	std	Y+48, r25	; 0x30
    389e:	8f a7       	std	Y+47, r24	; 0x2f
    38a0:	0f c0       	rjmp	.+30     	; 0x38c0 <counter_7_segment+0x1a2>
    38a2:	84 e1       	ldi	r24, 0x14	; 20
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9e a7       	std	Y+46, r25	; 0x2e
    38a8:	8d a7       	std	Y+45, r24	; 0x2d
    38aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    38ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <counter_7_segment+0x190>
    38b2:	9e a7       	std	Y+46, r25	; 0x2e
    38b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	98 ab       	std	Y+48, r25	; 0x30
    38be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38c2:	98 a9       	ldd	r25, Y+48	; 0x30
    38c4:	00 97       	sbiw	r24, 0x00	; 0
    38c6:	69 f7       	brne	.-38     	; 0x38a2 <counter_7_segment+0x184>
    38c8:	14 c0       	rjmp	.+40     	; 0x38f2 <counter_7_segment+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ca:	69 a9       	ldd	r22, Y+49	; 0x31
    38cc:	7a a9       	ldd	r23, Y+50	; 0x32
    38ce:	8b a9       	ldd	r24, Y+51	; 0x33
    38d0:	9c a9       	ldd	r25, Y+52	; 0x34
    38d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	98 ab       	std	Y+48, r25	; 0x30
    38dc:	8f a7       	std	Y+47, r24	; 0x2f
    38de:	8f a5       	ldd	r24, Y+47	; 0x2f
    38e0:	98 a9       	ldd	r25, Y+48	; 0x30
    38e2:	9c a7       	std	Y+44, r25	; 0x2c
    38e4:	8b a7       	std	Y+43, r24	; 0x2b
    38e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <counter_7_segment+0x1cc>
    38ee:	9c a7       	std	Y+44, r25	; 0x2c
    38f0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5);

		}

		if(number>100)
    38f2:	fe 01       	movw	r30, r28
    38f4:	ff 96       	adiw	r30, 0x3f	; 63
    38f6:	80 81       	ld	r24, Z
    38f8:	91 81       	ldd	r25, Z+1	; 0x01
    38fa:	85 36       	cpi	r24, 0x65	; 101
    38fc:	91 05       	cpc	r25, r1
    38fe:	08 f4       	brcc	.+2      	; 0x3902 <counter_7_segment+0x1e4>
    3900:	92 c0       	rjmp	.+292    	; 0x3a26 <counter_7_segment+0x308>
		{

			PORTC |=(1<<PC5);
    3902:	a5 e3       	ldi	r26, 0x35	; 53
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	e5 e3       	ldi	r30, 0x35	; 53
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	80 62       	ori	r24, 0x20	; 32
    390e:	8c 93       	st	X, r24
			PORTC &=~(1<<PC4);
    3910:	a5 e3       	ldi	r26, 0x35	; 53
    3912:	b0 e0       	ldi	r27, 0x00	; 0
    3914:	e5 e3       	ldi	r30, 0x35	; 53
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	80 81       	ld	r24, Z
    391a:	8f 7e       	andi	r24, 0xEF	; 239
    391c:	8c 93       	st	X, r24
			PORTC |=(1<<PC3);
    391e:	a5 e3       	ldi	r26, 0x35	; 53
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e5 e3       	ldi	r30, 0x35	; 53
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	88 60       	ori	r24, 0x08	; 8
    392a:	8c 93       	st	X, r24
			PORTC |=(1<<PC2);
    392c:	a5 e3       	ldi	r26, 0x35	; 53
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	e5 e3       	ldi	r30, 0x35	; 53
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	84 60       	ori	r24, 0x04	; 4
    3938:	8c 93       	st	X, r24

			PORTB = digit3;
    393a:	e8 e3       	ldi	r30, 0x38	; 56
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3940:	80 83       	st	Z, r24
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	a0 ea       	ldi	r26, 0xA0	; 160
    3948:	b0 e4       	ldi	r27, 0x40	; 64
    394a:	8f a3       	std	Y+39, r24	; 0x27
    394c:	98 a7       	std	Y+40, r25	; 0x28
    394e:	a9 a7       	std	Y+41, r26	; 0x29
    3950:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3952:	6f a1       	ldd	r22, Y+39	; 0x27
    3954:	78 a5       	ldd	r23, Y+40	; 0x28
    3956:	89 a5       	ldd	r24, Y+41	; 0x29
    3958:	9a a5       	ldd	r25, Y+42	; 0x2a
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	48 e4       	ldi	r20, 0x48	; 72
    3960:	53 e4       	ldi	r21, 0x43	; 67
    3962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	8b a3       	std	Y+35, r24	; 0x23
    396c:	9c a3       	std	Y+36, r25	; 0x24
    396e:	ad a3       	std	Y+37, r26	; 0x25
    3970:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3972:	6b a1       	ldd	r22, Y+35	; 0x23
    3974:	7c a1       	ldd	r23, Y+36	; 0x24
    3976:	8d a1       	ldd	r24, Y+37	; 0x25
    3978:	9e a1       	ldd	r25, Y+38	; 0x26
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	40 e8       	ldi	r20, 0x80	; 128
    3980:	5f e3       	ldi	r21, 0x3F	; 63
    3982:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3986:	88 23       	and	r24, r24
    3988:	2c f4       	brge	.+10     	; 0x3994 <counter_7_segment+0x276>
		__ticks = 1;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	9a a3       	std	Y+34, r25	; 0x22
    3990:	89 a3       	std	Y+33, r24	; 0x21
    3992:	3f c0       	rjmp	.+126    	; 0x3a12 <counter_7_segment+0x2f4>
	else if (__tmp > 65535)
    3994:	6b a1       	ldd	r22, Y+35	; 0x23
    3996:	7c a1       	ldd	r23, Y+36	; 0x24
    3998:	8d a1       	ldd	r24, Y+37	; 0x25
    399a:	9e a1       	ldd	r25, Y+38	; 0x26
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	3f ef       	ldi	r19, 0xFF	; 255
    39a0:	4f e7       	ldi	r20, 0x7F	; 127
    39a2:	57 e4       	ldi	r21, 0x47	; 71
    39a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    39a8:	18 16       	cp	r1, r24
    39aa:	4c f5       	brge	.+82     	; 0x39fe <counter_7_segment+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ac:	6f a1       	ldd	r22, Y+39	; 0x27
    39ae:	78 a5       	ldd	r23, Y+40	; 0x28
    39b0:	89 a5       	ldd	r24, Y+41	; 0x29
    39b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	40 e2       	ldi	r20, 0x20	; 32
    39ba:	51 e4       	ldi	r21, 0x41	; 65
    39bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	bc 01       	movw	r22, r24
    39c6:	cd 01       	movw	r24, r26
    39c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	9a a3       	std	Y+34, r25	; 0x22
    39d2:	89 a3       	std	Y+33, r24	; 0x21
    39d4:	0f c0       	rjmp	.+30     	; 0x39f4 <counter_7_segment+0x2d6>
    39d6:	84 e1       	ldi	r24, 0x14	; 20
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	98 a3       	std	Y+32, r25	; 0x20
    39dc:	8f 8f       	std	Y+31, r24	; 0x1f
    39de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39e0:	98 a1       	ldd	r25, Y+32	; 0x20
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <counter_7_segment+0x2c4>
    39e6:	98 a3       	std	Y+32, r25	; 0x20
    39e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ea:	89 a1       	ldd	r24, Y+33	; 0x21
    39ec:	9a a1       	ldd	r25, Y+34	; 0x22
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	9a a3       	std	Y+34, r25	; 0x22
    39f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f4:	89 a1       	ldd	r24, Y+33	; 0x21
    39f6:	9a a1       	ldd	r25, Y+34	; 0x22
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	69 f7       	brne	.-38     	; 0x39d6 <counter_7_segment+0x2b8>
    39fc:	14 c0       	rjmp	.+40     	; 0x3a26 <counter_7_segment+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3a00:	7c a1       	ldd	r23, Y+36	; 0x24
    3a02:	8d a1       	ldd	r24, Y+37	; 0x25
    3a04:	9e a1       	ldd	r25, Y+38	; 0x26
    3a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	9a a3       	std	Y+34, r25	; 0x22
    3a10:	89 a3       	std	Y+33, r24	; 0x21
    3a12:	89 a1       	ldd	r24, Y+33	; 0x21
    3a14:	9a a1       	ldd	r25, Y+34	; 0x22
    3a16:	9e 8f       	std	Y+30, r25	; 0x1e
    3a18:	8d 8f       	std	Y+29, r24	; 0x1d
    3a1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <counter_7_segment+0x300>
    3a22:	9e 8f       	std	Y+30, r25	; 0x1e
    3a24:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);
		}

		if(number>10)
    3a26:	fe 01       	movw	r30, r28
    3a28:	ff 96       	adiw	r30, 0x3f	; 63
    3a2a:	80 81       	ld	r24, Z
    3a2c:	91 81       	ldd	r25, Z+1	; 0x01
    3a2e:	8b 30       	cpi	r24, 0x0B	; 11
    3a30:	91 05       	cpc	r25, r1
    3a32:	08 f4       	brcc	.+2      	; 0x3a36 <counter_7_segment+0x318>
    3a34:	92 c0       	rjmp	.+292    	; 0x3b5a <counter_7_segment+0x43c>
		{

			PORTC |=(1<<PC5);
    3a36:	a5 e3       	ldi	r26, 0x35	; 53
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	e5 e3       	ldi	r30, 0x35	; 53
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	80 81       	ld	r24, Z
    3a40:	80 62       	ori	r24, 0x20	; 32
    3a42:	8c 93       	st	X, r24
			PORTC |=(1<<PC4);
    3a44:	a5 e3       	ldi	r26, 0x35	; 53
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	e5 e3       	ldi	r30, 0x35	; 53
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	80 61       	ori	r24, 0x10	; 16
    3a50:	8c 93       	st	X, r24
			PORTC &=~(1<<PC3);
    3a52:	a5 e3       	ldi	r26, 0x35	; 53
    3a54:	b0 e0       	ldi	r27, 0x00	; 0
    3a56:	e5 e3       	ldi	r30, 0x35	; 53
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	87 7f       	andi	r24, 0xF7	; 247
    3a5e:	8c 93       	st	X, r24
			PORTC |=(1<<PC2);
    3a60:	a5 e3       	ldi	r26, 0x35	; 53
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	e5 e3       	ldi	r30, 0x35	; 53
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	80 81       	ld	r24, Z
    3a6a:	84 60       	ori	r24, 0x04	; 4
    3a6c:	8c 93       	st	X, r24

			PORTB = digit2;
    3a6e:	e8 e3       	ldi	r30, 0x38	; 56
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a74:	80 83       	st	Z, r24
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	a0 ea       	ldi	r26, 0xA0	; 160
    3a7c:	b0 e4       	ldi	r27, 0x40	; 64
    3a7e:	89 8f       	std	Y+25, r24	; 0x19
    3a80:	9a 8f       	std	Y+26, r25	; 0x1a
    3a82:	ab 8f       	std	Y+27, r26	; 0x1b
    3a84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a86:	69 8d       	ldd	r22, Y+25	; 0x19
    3a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	48 e4       	ldi	r20, 0x48	; 72
    3a94:	53 e4       	ldi	r21, 0x43	; 67
    3a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	8d 8b       	std	Y+21, r24	; 0x15
    3aa0:	9e 8b       	std	Y+22, r25	; 0x16
    3aa2:	af 8b       	std	Y+23, r26	; 0x17
    3aa4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    3aac:	98 8d       	ldd	r25, Y+24	; 0x18
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	40 e8       	ldi	r20, 0x80	; 128
    3ab4:	5f e3       	ldi	r21, 0x3F	; 63
    3ab6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3aba:	88 23       	and	r24, r24
    3abc:	2c f4       	brge	.+10     	; 0x3ac8 <counter_7_segment+0x3aa>
		__ticks = 1;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	9c 8b       	std	Y+20, r25	; 0x14
    3ac4:	8b 8b       	std	Y+19, r24	; 0x13
    3ac6:	3f c0       	rjmp	.+126    	; 0x3b46 <counter_7_segment+0x428>
	else if (__tmp > 65535)
    3ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aca:	7e 89       	ldd	r23, Y+22	; 0x16
    3acc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ace:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	3f ef       	ldi	r19, 0xFF	; 255
    3ad4:	4f e7       	ldi	r20, 0x7F	; 127
    3ad6:	57 e4       	ldi	r21, 0x47	; 71
    3ad8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3adc:	18 16       	cp	r1, r24
    3ade:	4c f5       	brge	.+82     	; 0x3b32 <counter_7_segment+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e2       	ldi	r20, 0x20	; 32
    3aee:	51 e4       	ldi	r21, 0x41	; 65
    3af0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	bc 01       	movw	r22, r24
    3afa:	cd 01       	movw	r24, r26
    3afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	9c 8b       	std	Y+20, r25	; 0x14
    3b06:	8b 8b       	std	Y+19, r24	; 0x13
    3b08:	0f c0       	rjmp	.+30     	; 0x3b28 <counter_7_segment+0x40a>
    3b0a:	84 e1       	ldi	r24, 0x14	; 20
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	9a 8b       	std	Y+18, r25	; 0x12
    3b10:	89 8b       	std	Y+17, r24	; 0x11
    3b12:	89 89       	ldd	r24, Y+17	; 0x11
    3b14:	9a 89       	ldd	r25, Y+18	; 0x12
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	f1 f7       	brne	.-4      	; 0x3b16 <counter_7_segment+0x3f8>
    3b1a:	9a 8b       	std	Y+18, r25	; 0x12
    3b1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b20:	9c 89       	ldd	r25, Y+20	; 0x14
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	9c 8b       	std	Y+20, r25	; 0x14
    3b26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b28:	8b 89       	ldd	r24, Y+19	; 0x13
    3b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	69 f7       	brne	.-38     	; 0x3b0a <counter_7_segment+0x3ec>
    3b30:	14 c0       	rjmp	.+40     	; 0x3b5a <counter_7_segment+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b32:	6d 89       	ldd	r22, Y+21	; 0x15
    3b34:	7e 89       	ldd	r23, Y+22	; 0x16
    3b36:	8f 89       	ldd	r24, Y+23	; 0x17
    3b38:	98 8d       	ldd	r25, Y+24	; 0x18
    3b3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9c 8b       	std	Y+20, r25	; 0x14
    3b44:	8b 8b       	std	Y+19, r24	; 0x13
    3b46:	8b 89       	ldd	r24, Y+19	; 0x13
    3b48:	9c 89       	ldd	r25, Y+20	; 0x14
    3b4a:	98 8b       	std	Y+16, r25	; 0x10
    3b4c:	8f 87       	std	Y+15, r24	; 0x0f
    3b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b50:	98 89       	ldd	r25, Y+16	; 0x10
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <counter_7_segment+0x434>
    3b56:	98 8b       	std	Y+16, r25	; 0x10
    3b58:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
		}


		PORTC |=(1<<PC5);
    3b5a:	a5 e3       	ldi	r26, 0x35	; 53
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e5 e3       	ldi	r30, 0x35	; 53
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	80 62       	ori	r24, 0x20	; 32
    3b66:	8c 93       	st	X, r24
		PORTC |=(1<<PC4);
    3b68:	a5 e3       	ldi	r26, 0x35	; 53
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	e5 e3       	ldi	r30, 0x35	; 53
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	80 81       	ld	r24, Z
    3b72:	80 61       	ori	r24, 0x10	; 16
    3b74:	8c 93       	st	X, r24
		PORTC |=(1<<PC3);
    3b76:	a5 e3       	ldi	r26, 0x35	; 53
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	e5 e3       	ldi	r30, 0x35	; 53
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	80 81       	ld	r24, Z
    3b80:	88 60       	ori	r24, 0x08	; 8
    3b82:	8c 93       	st	X, r24
		PORTC &=~(1<<PC2);
    3b84:	a5 e3       	ldi	r26, 0x35	; 53
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	e5 e3       	ldi	r30, 0x35	; 53
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	80 81       	ld	r24, Z
    3b8e:	8b 7f       	andi	r24, 0xFB	; 251
    3b90:	8c 93       	st	X, r24
		PORTB = digit1;
    3b92:	e8 e3       	ldi	r30, 0x38	; 56
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b98:	80 83       	st	Z, r24
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	a0 ea       	ldi	r26, 0xA0	; 160
    3ba0:	b0 e4       	ldi	r27, 0x40	; 64
    3ba2:	8b 87       	std	Y+11, r24	; 0x0b
    3ba4:	9c 87       	std	Y+12, r25	; 0x0c
    3ba6:	ad 87       	std	Y+13, r26	; 0x0d
    3ba8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	48 e4       	ldi	r20, 0x48	; 72
    3bb8:	53 e4       	ldi	r21, 0x43	; 67
    3bba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	8f 83       	std	Y+7, r24	; 0x07
    3bc4:	98 87       	std	Y+8, r25	; 0x08
    3bc6:	a9 87       	std	Y+9, r26	; 0x09
    3bc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bca:	6f 81       	ldd	r22, Y+7	; 0x07
    3bcc:	78 85       	ldd	r23, Y+8	; 0x08
    3bce:	89 85       	ldd	r24, Y+9	; 0x09
    3bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	40 e8       	ldi	r20, 0x80	; 128
    3bd8:	5f e3       	ldi	r21, 0x3F	; 63
    3bda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3bde:	88 23       	and	r24, r24
    3be0:	2c f4       	brge	.+10     	; 0x3bec <counter_7_segment+0x4ce>
		__ticks = 1;
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	9e 83       	std	Y+6, r25	; 0x06
    3be8:	8d 83       	std	Y+5, r24	; 0x05
    3bea:	3f c0       	rjmp	.+126    	; 0x3c6a <counter_7_segment+0x54c>
	else if (__tmp > 65535)
    3bec:	6f 81       	ldd	r22, Y+7	; 0x07
    3bee:	78 85       	ldd	r23, Y+8	; 0x08
    3bf0:	89 85       	ldd	r24, Y+9	; 0x09
    3bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	3f ef       	ldi	r19, 0xFF	; 255
    3bf8:	4f e7       	ldi	r20, 0x7F	; 127
    3bfa:	57 e4       	ldi	r21, 0x47	; 71
    3bfc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c00:	18 16       	cp	r1, r24
    3c02:	4c f5       	brge	.+82     	; 0x3c56 <counter_7_segment+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e2       	ldi	r20, 0x20	; 32
    3c12:	51 e4       	ldi	r21, 0x41	; 65
    3c14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	0f c0       	rjmp	.+30     	; 0x3c4c <counter_7_segment+0x52e>
    3c2e:	84 e1       	ldi	r24, 0x14	; 20
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9c 83       	std	Y+4, r25	; 0x04
    3c34:	8b 83       	std	Y+3, r24	; 0x03
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	f1 f7       	brne	.-4      	; 0x3c3a <counter_7_segment+0x51c>
    3c3e:	9c 83       	std	Y+4, r25	; 0x04
    3c40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c42:	8d 81       	ldd	r24, Y+5	; 0x05
    3c44:	9e 81       	ldd	r25, Y+6	; 0x06
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	9e 83       	std	Y+6, r25	; 0x06
    3c4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	69 f7       	brne	.-38     	; 0x3c2e <counter_7_segment+0x510>
    3c54:	14 c0       	rjmp	.+40     	; 0x3c7e <counter_7_segment+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c56:	6f 81       	ldd	r22, Y+7	; 0x07
    3c58:	78 85       	ldd	r23, Y+8	; 0x08
    3c5a:	89 85       	ldd	r24, Y+9	; 0x09
    3c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	9e 83       	std	Y+6, r25	; 0x06
    3c68:	8d 83       	std	Y+5, r24	; 0x05
    3c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	89 83       	std	Y+1, r24	; 0x01
    3c72:	89 81       	ldd	r24, Y+1	; 0x01
    3c74:	9a 81       	ldd	r25, Y+2	; 0x02
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	f1 f7       	brne	.-4      	; 0x3c76 <counter_7_segment+0x558>
    3c7a:	9a 83       	std	Y+2, r25	; 0x02
    3c7c:	89 83       	std	Y+1, r24	; 0x01
void counter_7_segment()
{
	unsigned int number=0;
	unsigned char digit1=0,digit2=0,digit3=0,digit4=0;
		unsigned int temp=0;
while(number<=1000)
    3c7e:	fe 01       	movw	r30, r28
    3c80:	ff 96       	adiw	r30, 0x3f	; 63
    3c82:	80 81       	ld	r24, Z
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	23 e0       	ldi	r18, 0x03	; 3
    3c88:	89 3e       	cpi	r24, 0xE9	; 233
    3c8a:	92 07       	cpc	r25, r18
    3c8c:	08 f4       	brcc	.+2      	; 0x3c90 <counter_7_segment+0x572>
    3c8e:	5d cd       	rjmp	.-1350   	; 0x374a <counter_7_segment+0x2c>


	}


}
    3c90:	c0 5c       	subi	r28, 0xC0	; 192
    3c92:	df 4f       	sbci	r29, 0xFF	; 255
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <__udivmodhi4>:
    3ca4:	aa 1b       	sub	r26, r26
    3ca6:	bb 1b       	sub	r27, r27
    3ca8:	51 e1       	ldi	r21, 0x11	; 17
    3caa:	07 c0       	rjmp	.+14     	; 0x3cba <__udivmodhi4_ep>

00003cac <__udivmodhi4_loop>:
    3cac:	aa 1f       	adc	r26, r26
    3cae:	bb 1f       	adc	r27, r27
    3cb0:	a6 17       	cp	r26, r22
    3cb2:	b7 07       	cpc	r27, r23
    3cb4:	10 f0       	brcs	.+4      	; 0x3cba <__udivmodhi4_ep>
    3cb6:	a6 1b       	sub	r26, r22
    3cb8:	b7 0b       	sbc	r27, r23

00003cba <__udivmodhi4_ep>:
    3cba:	88 1f       	adc	r24, r24
    3cbc:	99 1f       	adc	r25, r25
    3cbe:	5a 95       	dec	r21
    3cc0:	a9 f7       	brne	.-22     	; 0x3cac <__udivmodhi4_loop>
    3cc2:	80 95       	com	r24
    3cc4:	90 95       	com	r25
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	08 95       	ret

00003ccc <__prologue_saves__>:
    3ccc:	2f 92       	push	r2
    3cce:	3f 92       	push	r3
    3cd0:	4f 92       	push	r4
    3cd2:	5f 92       	push	r5
    3cd4:	6f 92       	push	r6
    3cd6:	7f 92       	push	r7
    3cd8:	8f 92       	push	r8
    3cda:	9f 92       	push	r9
    3cdc:	af 92       	push	r10
    3cde:	bf 92       	push	r11
    3ce0:	cf 92       	push	r12
    3ce2:	df 92       	push	r13
    3ce4:	ef 92       	push	r14
    3ce6:	ff 92       	push	r15
    3ce8:	0f 93       	push	r16
    3cea:	1f 93       	push	r17
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
    3cf4:	ca 1b       	sub	r28, r26
    3cf6:	db 0b       	sbc	r29, r27
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	09 94       	ijmp

00003d04 <__epilogue_restores__>:
    3d04:	2a 88       	ldd	r2, Y+18	; 0x12
    3d06:	39 88       	ldd	r3, Y+17	; 0x11
    3d08:	48 88       	ldd	r4, Y+16	; 0x10
    3d0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d10:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d12:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d14:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d16:	b9 84       	ldd	r11, Y+9	; 0x09
    3d18:	c8 84       	ldd	r12, Y+8	; 0x08
    3d1a:	df 80       	ldd	r13, Y+7	; 0x07
    3d1c:	ee 80       	ldd	r14, Y+6	; 0x06
    3d1e:	fd 80       	ldd	r15, Y+5	; 0x05
    3d20:	0c 81       	ldd	r16, Y+4	; 0x04
    3d22:	1b 81       	ldd	r17, Y+3	; 0x03
    3d24:	aa 81       	ldd	r26, Y+2	; 0x02
    3d26:	b9 81       	ldd	r27, Y+1	; 0x01
    3d28:	ce 0f       	add	r28, r30
    3d2a:	d1 1d       	adc	r29, r1
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	ed 01       	movw	r28, r26
    3d38:	08 95       	ret

00003d3a <_exit>:
    3d3a:	f8 94       	cli

00003d3c <__stop_program>:
    3d3c:	ff cf       	rjmp	.-2      	; 0x3d3c <__stop_program>
